# -*- coding: utf-8 -*-

"""
   BaseJsonLib.Controllers.NomadController

   This file was automatically generated by APIMATIC BETA v2.0 on 02/24/2016
"""
import unirest

from BaseJsonLib.APIHelper import APIHelper
from BaseJsonLib.Configuration import Configuration
from BaseJsonLib.APIException import APIException
from BaseJsonLib.Models.CategorySerializer import CategorySerializer
from BaseJsonLib.Models.CategorySerializer import CategorySerializer
from BaseJsonLib.Models.CompanySerializer import CompanySerializer
from BaseJsonLib.Models.CompanySerializer import CompanySerializer
from BaseJsonLib.Models.CompanySerializer import CompanySerializer
from BaseJsonLib.Models.CompanySerializer import CompanySerializer
from BaseJsonLib.Models.CompanySerializer import CompanySerializer
from BaseJsonLib.Models.CompanySerializer import CompanySerializer
from BaseJsonLib.Models.CompanySerializer import CompanySerializer
from BaseJsonLib.Models.UserSerializer import UserSerializer


class NomadController(object):


    """A Controller to access Endpoints in the BaseJsonLib API."""

    def get_categories_list(self,
                            page):
        """Does a GET request to /api/v1.0/nomad/categories/.

        Project categories management

        Args:
            page (int): TODO: type description here.

        Returns:
            CategorySerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/categories/"

        # Process optional query parameters
        query_parameters = {
            "page": page
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CategorySerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_categories_retrieve(self,
                                pk):
        """Does a GET request to /api/v1.0/nomad/categories/{pk}/.

        Project categories management

        Args:
            pk (string): TODO: type description here.

        Returns:
            CategorySerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/categories/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CategorySerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_companies_create(self,
                                created,
                                employees,
                                id,
                                is_active,
                                name,
                                updated,
                                occupation=None):
        """Does a POST request to /api/v1.0/nomad/companies/.

        Company management

        Args:
            created (string): Created at
            employees (string): Employees
            id (string): Id
            is_active (string): Active
            name (string): TODO: type description here.
            updated (string): Updated at
            occupation (OccupationEnum, optional): TODO: type description
                here.

        Returns:
            CompanySerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/companies/"

        # Process optional query parameters
        query_parameters = {
            "created": created,
            "employees": employees,
            "id": id,
            "is_active": is_active,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "name": name,
            "occupation":  occupation.to_string() if occupation is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CompanySerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_companies_list(self,
                           created,
                           employees,
                           id,
                           is_active,
                           name,
                           occupation,
                           page,
                           updated):
        """Does a GET request to /api/v1.0/nomad/companies/.

        Company management

        Args:
            created (string): Created at
            employees (string): Employees
            id (string): Id
            is_active (string): Active
            name (string): TODO: type description here.
            occupation (OccupationEnum): Occupation
            page (int): TODO: type description here.
            updated (string): Updated at

        Returns:
            CompanySerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/companies/"

        # Process optional query parameters
        query_parameters = {
            "created": created,
            "employees": employees,
            "id": id,
            "is_active": is_active,
            "name": name,
            "occupation":  occupation.to_string() if occupation is not None else None,
            "page": page,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CompanySerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_companies_update(self,
                                created,
                                employees,
                                id,
                                is_active,
                                name,
                                pk,
                                updated,
                                occupation=None):
        """Does a PUT request to /api/v1.0/nomad/companies/{pk}/.

        Company management

        Args:
            created (string): Created at
            employees (string): Employees
            id (string): Id
            is_active (string): Active
            name (string): TODO: type description here.
            pk (string): TODO: type description here.
            updated (string): Updated at
            occupation (OccupationEnum, optional): TODO: type description
                here.

        Returns:
            CompanySerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/companies/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_parameters = {
            "created": created,
            "employees": employees,
            "id": id,
            "is_active": is_active,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "name": name,
            "occupation":  occupation.to_string() if occupation is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CompanySerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_companies_update(self,
                                created,
                                employees,
                                id,
                                is_active,
                                name,
                                pk,
                                updated,
                                occupation=None):
        """Does a POST request to /api/v1.0/nomad/companies/{pk}/.

        Company management

        Args:
            created (string): Created at
            employees (string): Employees
            id (string): Id
            is_active (string): Active
            name (string): TODO: type description here.
            pk (string): TODO: type description here.
            updated (string): Updated at
            occupation (OccupationEnum, optional): TODO: type description
                here.

        Returns:
            CompanySerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/companies/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_parameters = {
            "created": created,
            "employees": employees,
            "id": id,
            "is_active": is_active,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "name": name,
            "occupation":  occupation.to_string() if occupation is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CompanySerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_companies_partial_update(self,
                                        pk,
                                        created=None,
                                        employees=None,
                                        id=None,
                                        is_active=None,
                                        name=None,
                                        occupation=None,
                                        updated=None):
        """Does a PATCH request to /api/v1.0/nomad/companies/{pk}/.

        Company management

        Args:
            pk (string): TODO: type description here.
            created (string, optional): Created at
            employees (string, optional): Employees
            id (string, optional): Id
            is_active (string, optional): Active
            name (string, optional): TODO: type description here.
            occupation (OccupationEnum, optional): TODO: type description
                here.
            updated (string, optional): Updated at

        Returns:
            CompanySerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/companies/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_parameters = {
            "created": created,
            "employees": employees,
            "id": id,
            "is_active": is_active,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "name": name,
            "occupation":  occupation.to_string() if occupation is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CompanySerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_companies_retrieve(self,
                               created,
                               employees,
                               id,
                               is_active,
                               name,
                               occupation,
                               pk,
                               updated):
        """Does a GET request to /api/v1.0/nomad/companies/{pk}/.

        Company management

        Args:
            created (string): Created at
            employees (string): Employees
            id (string): Id
            is_active (string): Active
            name (string): TODO: type description here.
            occupation (OccupationEnum): Occupation
            pk (string): TODO: type description here.
            updated (string): Updated at

        Returns:
            CompanySerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/companies/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_parameters = {
            "created": created,
            "employees": employees,
            "id": id,
            "is_active": is_active,
            "name": name,
            "occupation":  occupation.to_string() if occupation is not None else None,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CompanySerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def delete_companies_destroy(self,
                                 created,
                                 employees,
                                 id,
                                 is_active,
                                 name,
                                 occupation,
                                 pk,
                                 updated):
        """Does a DELETE request to /api/v1.0/nomad/companies/{pk}/.

        Company management

        Args:
            created (string): Created at
            employees (string): Employees
            id (string): Id
            is_active (string): Active
            name (string): TODO: type description here.
            occupation (OccupationEnum): Occupation
            pk (string): TODO: type description here.
            updated (string): Updated at

        Returns:
            CompanySerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/companies/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_parameters = {
            "created": created,
            "employees": employees,
            "id": id,
            "is_active": is_active,
            "name": name,
            "occupation":  occupation.to_string() if occupation is not None else None,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CompanySerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_users_retrieve(self,
                           pk):
        """Does a GET request to /api/v1.0/nomad/users/{pk}/.

        Users management

        Args:
            pk (string): TODO: type description here.

        Returns:
            UserSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/users/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return UserSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)
