# -*- coding: utf-8 -*-

"""
   BaseJsonLib.Controllers.APIController

   This file was automatically generated by APIMATIC BETA v2.0 on 02/24/2016
"""
import unirest

from BaseJsonLib.APIHelper import APIHelper
from BaseJsonLib.Configuration import Configuration
from BaseJsonLib.APIException import APIException
from BaseJsonLib.Models.JSONWebTokenSerializer import JSONWebTokenSerializer
from BaseJsonLib.Models.VerifyJSONWebTokenSerializer import VerifyJSONWebTokenSerializer
from BaseJsonLib.Models.RefreshJSONWebTokenSerializer import RefreshJSONWebTokenSerializer
from BaseJsonLib.Models.UserJWTSerializer import UserJWTSerializer
from BaseJsonLib.Models.JWTSerializer import JWTSerializer
from BaseJsonLib.Models.ResetPasswordSerializer import ResetPasswordSerializer
from BaseJsonLib.Models.RegisterExpertSerializer import RegisterExpertSerializer
from BaseJsonLib.Models.ProjectSerializer import ProjectSerializer
from BaseJsonLib.Models.ProjectSerializer import ProjectSerializer
from BaseJsonLib.Models.ProjectSerializer import ProjectSerializer
from BaseJsonLib.Models.ProjectSerializer import ProjectSerializer
from BaseJsonLib.Models.ProjectSerializer import ProjectSerializer
from BaseJsonLib.Models.ProjectSerializer import ProjectSerializer
from BaseJsonLib.Models.ProjectSerializer import ProjectSerializer
from BaseJsonLib.Models.TaskSerializer import TaskSerializer
from BaseJsonLib.Models.TaskSerializer import TaskSerializer
from BaseJsonLib.Models.TaskSerializer import TaskSerializer
from BaseJsonLib.Models.TaskSerializer import TaskSerializer
from BaseJsonLib.Models.TaskSerializer import TaskSerializer
from BaseJsonLib.Models.TaskSerializer import TaskSerializer
from BaseJsonLib.Models.TaskSerializer import TaskSerializer
from BaseJsonLib.Models.InvitationRequestSerializer import InvitationRequestSerializer
from BaseJsonLib.Models.InvitationRequestSerializer import InvitationRequestSerializer
from BaseJsonLib.Models.InvitationRequestSerializer import InvitationRequestSerializer
from BaseJsonLib.Models.InvitationRequestSerializer import InvitationRequestSerializer
from BaseJsonLib.Models.InvitationRequestSerializer import InvitationRequestSerializer
from BaseJsonLib.Models.InvitationRequestSerializer import InvitationRequestSerializer
from BaseJsonLib.Models.InvitationRequestSerializer import InvitationRequestSerializer
from BaseJsonLib.Models.InvitationSerializer import InvitationSerializer
from BaseJsonLib.Models.InvitationSerializer import InvitationSerializer
from BaseJsonLib.Models.InvitationSerializer import InvitationSerializer
from BaseJsonLib.Models.InvitationSerializer import InvitationSerializer
from BaseJsonLib.Models.InvitationSerializer import InvitationSerializer
from BaseJsonLib.Models.InvitationSerializer import InvitationSerializer
from BaseJsonLib.Models.InvitationSerializer import InvitationSerializer
from BaseJsonLib.Models.UserSerializer import UserSerializer
from BaseJsonLib.Models.WhoAmISerializer import WhoAmISerializer
from BaseJsonLib.Models.SpokenLanguageSerializer import SpokenLanguageSerializer
from BaseJsonLib.Models.SpokenLanguageSerializer import SpokenLanguageSerializer
from BaseJsonLib.Models.SpokenLanguageSerializer import SpokenLanguageSerializer
from BaseJsonLib.Models.SpokenLanguageSerializer import SpokenLanguageSerializer
from BaseJsonLib.Models.SpokenLanguageSerializer import SpokenLanguageSerializer
from BaseJsonLib.Models.ExpertiseSerializer import ExpertiseSerializer
from BaseJsonLib.Models.ExpertiseSerializer import ExpertiseSerializer
from BaseJsonLib.Models.ExpertiseSerializer import ExpertiseSerializer
from BaseJsonLib.Models.ExpertiseSerializer import ExpertiseSerializer
from BaseJsonLib.Models.ExpertiseSerializer import ExpertiseSerializer
from BaseJsonLib.Models.ExpertiseSerializer import ExpertiseSerializer
from BaseJsonLib.Models.ExpertiseSerializer import ExpertiseSerializer
from BaseJsonLib.Models.SkillSerializer import SkillSerializer
from BaseJsonLib.Models.SkillSerializer import SkillSerializer
from BaseJsonLib.Models.SkillSerializer import SkillSerializer
from BaseJsonLib.Models.SkillSerializer import SkillSerializer
from BaseJsonLib.Models.SkillSerializer import SkillSerializer
from BaseJsonLib.Models.SkillSerializer import SkillSerializer
from BaseJsonLib.Models.SkillSerializer import SkillSerializer
from BaseJsonLib.Models.SettingsNicknameSerializer import SettingsNicknameSerializer
from BaseJsonLib.Models.SettingsNicknameSerializer import SettingsNicknameSerializer
from BaseJsonLib.Models.SettingsNicknameSerializer import SettingsNicknameSerializer
from BaseJsonLib.Models.SettingsPasswordSerializer import SettingsPasswordSerializer
from BaseJsonLib.Models.SettingsPasswordSerializer import SettingsPasswordSerializer
from BaseJsonLib.Models.SettingsLanguageSerializer import SettingsLanguageSerializer
from BaseJsonLib.Models.SettingsLanguageSerializer import SettingsLanguageSerializer
from BaseJsonLib.Models.SettingsLanguageSerializer import SettingsLanguageSerializer
from BaseJsonLib.Models.SettingsTimezoneSerializer import SettingsTimezoneSerializer
from BaseJsonLib.Models.SettingsTimezoneSerializer import SettingsTimezoneSerializer
from BaseJsonLib.Models.SettingsTimezoneSerializer import SettingsTimezoneSerializer
from BaseJsonLib.Models.UserEmailSerializer import UserEmailSerializer
from BaseJsonLib.Models.UserEmailSerializer import UserEmailSerializer
from BaseJsonLib.Models.UserEmailSerializer import UserEmailSerializer
from BaseJsonLib.Models.UserEmailSerializer import UserEmailSerializer
from BaseJsonLib.Models.UserEmailSerializer import UserEmailSerializer


class APIController(object):


    """A Controller to access Endpoints in the BaseJsonLib API."""

    def create_obtain_json_web_token_post(self,
                                          json_web_token_serializer):
        """Does a POST request to /api/v1.0/auth/token/obtain/.

        API View that receives a POST with a users username and password

        Args:
            json_web_token_serializer (JSONWebTokenSerializer): TODO: type
                description here.

        Returns:
            JSONWebTokenSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/auth/token/obtain/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "content-type": "application/json; charset=utf-8",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers,  params=APIHelper.json_serialize(json_web_token_serializer))

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return JSONWebTokenSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_verify_json_web_token_post(self,
                                          token):
        """Does a POST request to /api/v1.0/auth/token/verify/.

        API View that checks the veracity of a token, returning the token if
        it

        Args:
            token (string): TODO: type description here.

        Returns:
            VerifyJSONWebTokenSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/auth/token/verify/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "token": token
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return VerifyJSONWebTokenSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_refresh_json_web_token_post(self,
                                           token):
        """Does a POST request to /api/v1.0/auth/token/refresh/.

        API View that returns a refreshed token (with new expiration) based
        on

        Args:
            token (string): TODO: type description here.

        Returns:
            RefreshJSONWebTokenSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/auth/token/refresh/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "token": token
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return RefreshJSONWebTokenSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_social_jwt_user_auth_post(self,
                                         email,
                                         first_name,
                                         last_name,
                                         nickname,
                                         timezone,
                                         var,
                                         city=None,
                                         country=None,
                                         headline=None,
                                         language=None,
                                         photo=None,
                                         role=None,
                                         something_about_me=None):
        """Does a POST request to /api/v1.0/auth/token/social/jwtu/{var}.

        TODO: type endpoint description here.

        Args:
            email (string): TODO: type description here.
            first_name (string): TODO: type description here.
            last_name (string): TODO: type description here.
            nickname (string): TODO: type description here.
            timezone (string):  (Acceptable values are: "Africa/Abidjan",
                "Africa/Accra", "Africa/Addis_Ababa", "Africa/Algiers",
                "Africa/Asmara", "Africa/Bamako", "Africa/Bangui",
                "Africa/Banjul", "Africa/Bissau", "Africa/Blantyre",
                "Africa/Brazzaville", "Africa/Bujumbura", "Africa/Cairo",
                "Africa/Casablanca", "Africa/Ceuta", "Africa/Conakry",
                "Africa/Dakar", "Africa/Dar_es_Salaam", "Africa/Djibouti",
                "Africa/Douala", "Africa/El_Aaiun", "Africa/Freetown",
                "Africa/Gaborone", "Africa/Harare", "Africa/Johannesburg",
                "Africa/Juba", "Africa/Kampala", "Africa/Khartoum",
                "Africa/Kigali", "Africa/Kinshasa", "Africa/Lagos",
                "Africa/Libreville", "Africa/Lome", "Africa/Luanda",
                "Africa/Lubumbashi", "Africa/Lusaka", "Africa/Malabo",
                "Africa/Maputo", "Africa/Maseru", "Africa/Mbabane",
                "Africa/Mogadishu", "Africa/Monrovia", "Africa/Nairobi",
                "Africa/Ndjamena", "Africa/Niamey", "Africa/Nouakchott",
                "Africa/Ouagadougou", "Africa/Porto-Novo", "Africa/Sao_Tome",
                "Africa/Tripoli", "Africa/Tunis", "Africa/Windhoek",
                "America/Adak", "America/Anchorage", "America/Anguilla",
                "America/Antigua", "America/Araguaina",
                "America/Argentina/Buenos_Aires",
                "America/Argentina/Catamarca", "America/Argentina/Cordoba",
                "America/Argentina/Jujuy", "America/Argentina/La_Rioja",
                "America/Argentina/Mendoza", "America/Argentina/Rio_Gallegos",
                "America/Argentina/Salta", "America/Argentina/San_Juan",
                "America/Argentina/San_Luis", "America/Argentina/Tucuman",
                "America/Argentina/Ushuaia", "America/Aruba",
                "America/Asuncion", "America/Atikokan", "America/Bahia",
                "America/Bahia_Banderas", "America/Barbados", "America/Belem",
                "America/Belize", "America/Blanc-Sablon", "America/Boa_Vista",
                "America/Bogota", "America/Boise", "America/Cambridge_Bay",
                "America/Campo_Grande", "America/Cancun", "America/Caracas",
                "America/Cayenne", "America/Cayman", "America/Chicago",
                "America/Chihuahua", "America/Costa_Rica", "America/Creston",
                "America/Cuiaba", "America/Curacao", "America/Danmarkshavn",
                "America/Dawson", "America/Dawson_Creek", "America/Denver",
                "America/Detroit", "America/Dominica", "America/Edmonton",
                "America/Eirunepe", "America/El_Salvador",
                "America/Fort_Nelson", "America/Fortaleza",
                "America/Glace_Bay", "America/Godthab", "America/Goose_Bay",
                "America/Grand_Turk", "America/Grenada", "America/Guadeloupe",
                "America/Guatemala", "America/Guayaquil", "America/Guyana",
                "America/Halifax", "America/Havana", "America/Hermosillo",
                "America/Indiana/Indianapolis", "America/Indiana/Knox",
                "America/Indiana/Marengo", "America/Indiana/Petersburg",
                "America/Indiana/Tell_City", "America/Indiana/Vevay",
                "America/Indiana/Vincennes", "America/Indiana/Winamac",
                "America/Inuvik", "America/Iqaluit", "America/Jamaica",
                "America/Juneau", "America/Kentucky/Louisville",
                "America/Kentucky/Monticello", "America/Kralendijk",
                "America/La_Paz", "America/Lima", "America/Los_Angeles",
                "America/Lower_Princes", "America/Maceio", "America/Managua",
                "America/Manaus", "America/Marigot", "America/Martinique",
                "America/Matamoros", "America/Mazatlan", "America/Menominee",
                "America/Merida", "America/Metlakatla", "America/Mexico_City",
                "America/Miquelon", "America/Moncton", "America/Monterrey",
                "America/Montevideo", "America/Montserrat", "America/Nassau",
                "America/New_York", "America/Nipigon", "America/Nome",
                "America/Noronha", "America/North_Dakota/Beulah",
                "America/North_Dakota/Center",
                "America/North_Dakota/New_Salem", "America/Ojinaga",
                "America/Panama", "America/Pangnirtung", "America/Paramaribo",
                "America/Phoenix", "America/Port-au-Prince",
                "America/Port_of_Spain", "America/Porto_Velho",
                "America/Puerto_Rico", "America/Rainy_River",
                "America/Rankin_Inlet", "America/Recife", "America/Regina",
                "America/Resolute", "America/Rio_Branco",
                "America/Santa_Isabel", "America/Santarem",
                "America/Santiago", "America/Santo_Domingo",
                "America/Sao_Paulo", "America/Scoresbysund", "America/Sitka",
                "America/St_Barthelemy", "America/St_Johns",
                "America/St_Kitts", "America/St_Lucia", "America/St_Thomas",
                "America/St_Vincent", "America/Swift_Current",
                "America/Tegucigalpa", "America/Thule", "America/Thunder_Bay",
                "America/Tijuana", "America/Toronto", "America/Tortola",
                "America/Vancouver", "America/Whitehorse", "America/Winnipeg",
                "America/Yakutat", "America/Yellowknife", "Antarctica/Casey",
                "Antarctica/Davis", "Antarctica/DumontDUrville",
                "Antarctica/Macquarie", "Antarctica/Mawson",
                "Antarctica/McMurdo", "Antarctica/Palmer",
                "Antarctica/Rothera", "Antarctica/Syowa", "Antarctica/Troll",
                "Antarctica/Vostok", "Arctic/Longyearbyen", "Asia/Aden",
                "Asia/Almaty", "Asia/Amman", "Asia/Anadyr", "Asia/Aqtau",
                "Asia/Aqtobe", "Asia/Ashgabat", "Asia/Baghdad",
                "Asia/Bahrain", "Asia/Baku", "Asia/Bangkok", "Asia/Beirut",
                "Asia/Bishkek", "Asia/Brunei", "Asia/Chita",
                "Asia/Choibalsan", "Asia/Colombo", "Asia/Damascus",
                "Asia/Dhaka", "Asia/Dili", "Asia/Dubai", "Asia/Dushanbe",
                "Asia/Gaza", "Asia/Hebron", "Asia/Ho_Chi_Minh",
                "Asia/Hong_Kong", "Asia/Hovd", "Asia/Irkutsk", "Asia/Jakarta",
                "Asia/Jayapura", "Asia/Jerusalem", "Asia/Kabul",
                "Asia/Kamchatka", "Asia/Karachi", "Asia/Kathmandu",
                "Asia/Khandyga", "Asia/Kolkata", "Asia/Krasnoyarsk",
                "Asia/Kuala_Lumpur", "Asia/Kuching", "Asia/Kuwait",
                "Asia/Macau", "Asia/Magadan", "Asia/Makassar", "Asia/Manila",
                "Asia/Muscat", "Asia/Nicosia", "Asia/Novokuznetsk",
                "Asia/Novosibirsk", "Asia/Omsk", "Asia/Oral",
                "Asia/Phnom_Penh", "Asia/Pontianak", "Asia/Pyongyang",
                "Asia/Qatar", "Asia/Qyzylorda", "Asia/Rangoon", "Asia/Riyadh",
                "Asia/Sakhalin", "Asia/Samarkand", "Asia/Seoul",
                "Asia/Shanghai", "Asia/Singapore", "Asia/Srednekolymsk",
                "Asia/Taipei", "Asia/Tashkent", "Asia/Tbilisi", "Asia/Tehran",
                "Asia/Thimphu", "Asia/Tokyo", "Asia/Ulaanbaatar",
                "Asia/Urumqi", "Asia/Ust-Nera", "Asia/Vientiane",
                "Asia/Vladivostok", "Asia/Yakutsk", "Asia/Yekaterinburg",
                "Asia/Yerevan", "Atlantic/Azores", "Atlantic/Bermuda",
                "Atlantic/Canary", "Atlantic/Cape_Verde", "Atlantic/Faroe",
                "Atlantic/Madeira", "Atlantic/Reykjavik",
                "Atlantic/South_Georgia", "Atlantic/St_Helena",
                "Atlantic/Stanley", "Australia/Adelaide",
                "Australia/Brisbane", "Australia/Broken_Hill",
                "Australia/Currie", "Australia/Darwin", "Australia/Eucla",
                "Australia/Hobart", "Australia/Lindeman",
                "Australia/Lord_Howe", "Australia/Melbourne",
                "Australia/Perth", "Australia/Sydney", "Canada/Atlantic",
                "Canada/Central", "Canada/Eastern", "Canada/Mountain",
                "Canada/Newfoundland", "Canada/Pacific", "Europe/Amsterdam",
                "Europe/Andorra", "Europe/Athens", "Europe/Belgrade",
                "Europe/Berlin", "Europe/Bratislava", "Europe/Brussels",
                "Europe/Bucharest", "Europe/Budapest", "Europe/Busingen",
                "Europe/Chisinau", "Europe/Copenhagen", "Europe/Dublin",
                "Europe/Gibraltar", "Europe/Guernsey", "Europe/Helsinki",
                "Europe/Isle_of_Man", "Europe/Istanbul", "Europe/Jersey",
                "Europe/Kaliningrad", "Europe/Kiev", "Europe/Lisbon",
                "Europe/Ljubljana", "Europe/London", "Europe/Luxembourg",
                "Europe/Madrid", "Europe/Malta", "Europe/Mariehamn",
                "Europe/Minsk", "Europe/Monaco", "Europe/Moscow",
                "Europe/Oslo", "Europe/Paris", "Europe/Podgorica",
                "Europe/Prague", "Europe/Riga", "Europe/Rome",
                "Europe/Samara", "Europe/San_Marino", "Europe/Sarajevo",
                "Europe/Simferopol", "Europe/Skopje", "Europe/Sofia",
                "Europe/Stockholm", "Europe/Tallinn", "Europe/Tirane",
                "Europe/Uzhgorod", "Europe/Vaduz", "Europe/Vatican",
                "Europe/Vienna", "Europe/Vilnius", "Europe/Volgograd",
                "Europe/Warsaw", "Europe/Zagreb", "Europe/Zaporozhye",
                "Europe/Zurich", "GMT", "Indian/Antananarivo",
                "Indian/Chagos", "Indian/Christmas", "Indian/Cocos",
                "Indian/Comoro", "Indian/Kerguelen", "Indian/Mahe",
                "Indian/Maldives", "Indian/Mauritius", "Indian/Mayotte",
                "Indian/Reunion", "Pacific/Apia", "Pacific/Auckland",
                "Pacific/Bougainville", "Pacific/Chatham", "Pacific/Chuuk",
                "Pacific/Easter", "Pacific/Efate", "Pacific/Enderbury",
                "Pacific/Fakaofo", "Pacific/Fiji", "Pacific/Funafuti",
                "Pacific/Galapagos", "Pacific/Gambier", "Pacific/Guadalcanal",
                "Pacific/Guam", "Pacific/Honolulu", "Pacific/Johnston",
                "Pacific/Kiritimati", "Pacific/Kosrae", "Pacific/Kwajalein",
                "Pacific/Majuro", "Pacific/Marquesas", "Pacific/Midway",
                "Pacific/Nauru", "Pacific/Niue", "Pacific/Norfolk",
                "Pacific/Noumea", "Pacific/Pago_Pago", "Pacific/Palau",
                "Pacific/Pitcairn", "Pacific/Pohnpei", "Pacific/Port_Moresby",
                "Pacific/Rarotonga", "Pacific/Saipan", "Pacific/Tahiti",
                "Pacific/Tarawa", "Pacific/Tongatapu", "Pacific/Wake",
                "Pacific/Wallis", "US/Alaska", "US/Arizona", "US/Central",
                "US/Eastern", "US/Hawaii", "US/Mountain", "US/Pacific",
                "UTC")
            var (string): TODO: type description here.
            city (string, optional): TODO: type description here.
            country (string, optional):  (Acceptable values are: "AF", "AX",
                "AL", "DZ", "AS", "AD", "AO", "AI", "AQ", "AG", "AR", "AM",
                "AW", "AU", "AT", "AZ", "BS", "BH", "BD", "BB", "BY", "BE",
                "BZ", "BJ", "BM", "BT", "BO", "BQ", "BA", "BW", "BV", "BR",
                "IO", "BN", "BG", "BF", "BI", "CV", "KH", "CM", "CA", "KY",
                "CF", "TD", "CL", "CN", "CX", "CC", "CO", "KM", "CG", "CD",
                "CK", "CR", "CI", "HR", "CU", "CW", "CY", "CZ", "DK", "DJ",
                "DM", "DO", "EC", "EG", "SV", "GQ", "ER", "EE", "ET", "FK",
                "FO", "FJ", "FI", "FR", "GF", "PF", "TF", "GA", "GM", "GE",
                "DE", "GH", "GI", "GR", "GL", "GD", "GP", "GU", "GT", "GG",
                "GN", "GW", "GY", "HT", "HM", "VA", "HN", "HK", "HU", "IS",
                "IN", "ID", "IR", "IQ", "IE", "IM", "IL", "IT", "JM", "JP",
                "JE", "JO", "KZ", "KE", "KI", "KW", "KG", "LA", "LV", "LB",
                "LS", "LR", "LY", "LI", "LT", "LU", "MO", "MK", "MG", "MW",
                "MY", "MV", "ML", "MT", "MH", "MQ", "MR", "MU", "YT", "MX",
                "FM", "MD", "MC", "MN", "ME", "MS", "MA", "MZ", "MM", "NA",
                "NR", "NP", "NL", "NC", "NZ", "NI", "NE", "NG", "NU", "NF",
                "KP", "MP", "NO", "OM", "PK", "PW", "PS", "PA", "PG", "PY",
                "PE", "PH", "PN", "PL", "PT", "PR", "QA", "RE", "RO", "RU",
                "RW", "BL", "SH", "KN", "LC", "MF", "PM", "VC", "WS", "SM",
                "ST", "SA", "SN", "RS", "SC", "SL", "SG", "SX", "SK", "SI",
                "SB", "SO", "ZA", "GS", "KR", "SS", "ES", "LK", "SD", "SR",
                "SJ", "SZ", "SE", "CH", "SY", "TW", "TJ", "TZ", "TH", "TL",
                "TG", "TK", "TO", "TT", "TN", "TR", "TM", "TC", "TV", "UG",
                "UA", "AE", "GB", "UM", "US", "UY", "UZ", "VU", "VE", "VN",
                "VG", "VI", "WF", "EH", "YE", "ZM", "ZW")
            headline (string, optional): TODO: type description here.
            language (string, optional): TODO: type description here.
            photo (string, optional): TODO: type description here.
            role (RoleEnum, optional): TODO: type description here.
            something_about_me (string, optional): TODO: type description
                here.

        Returns:
            UserJWTSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/auth/token/social/jwtu/{var}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "var": var
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "email": email,
            "first_name": first_name,
            "last_name": last_name,
            "nickname": nickname,
            "timezone": timezone,
            "city": city,
            "country":  country if country is not None else "AF",
            "headline": headline,
            "language": language,
            "photo": photo,
            "role":  role.to_string() if role is not None else None,
            "something_about_me": something_about_me
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return UserJWTSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_social_jwt_only_auth_post(self,
                                         jwt_serializer,
                                         var):
        """Does a POST request to /api/v1.0/auth/token/social/jwt/{var}.

        TODO: type endpoint description here.

        Args:
            jwt_serializer (JWTSerializer): TODO: type description here.
            var (string): TODO: type description here.

        Returns:
            JWTSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/auth/token/social/jwt/{var}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "var": var
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "content-type": "application/json; charset=utf-8",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers,  params=APIHelper.json_serialize(jwt_serializer))

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return JWTSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_reset_password_api_post(self,
                                       email):
        """Does a POST request to /api/v1.0/auth/password/reset/.

        Sends reset password link for authenticated user

        Args:
            email (string): TODO: type description here.

        Returns:
            ResetPasswordSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/auth/password/reset/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "email": email
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ResetPasswordSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_register_api_post(self,
                                 email,
                                 password):
        """Does a POST request to /api/v1.0/auth/register/.

        Register new user

        Args:
            email (string): TODO: type description here.
            password (string): TODO: type description here.

        Returns:
            RegisterExpertSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/auth/register/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "email": email,
            "password": password
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return RegisterExpertSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_projects_create(self,
                               category,
                               company,
                               cost,
                               created,
                               id,
                               is_active,
                               state,
                               updated,
                               due_date=None,
                               name=None,
                               start_date=None):
        """Does a POST request to /api/v1.0/nomad/projects/.

        Projects management

        Args:
            category (string): TODO: type description here.
            company (string): TODO: type description here.
            cost (string): TODO: type description here.
            created (string): Created at
            id (string): Id
            is_active (string): Active
            state (string): State
            updated (string): Updated at
            due_date (DateTime, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            start_date (DateTime, optional): TODO: type description here.

        Returns:
            ProjectSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/projects/"

        # Process optional query parameters
        query_parameters = {
            "created": created,
            "id": id,
            "is_active": is_active,
            "state": state,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "category": category,
            "company": company,
            "cost": cost,
            "due_date": due_date,
            "name": name,
            "start_date": start_date
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ProjectSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_projects_list(self,
                          category,
                          company,
                          cost,
                          created,
                          due_date,
                          id,
                          is_active,
                          name,
                          page,
                          start_date,
                          state,
                          updated):
        """Does a GET request to /api/v1.0/nomad/projects/.

        Projects management

        Args:
            category (string): Category
            company (string): Company
            cost (string): Cost
            created (string): Created at
            due_date (string): Start date
            id (string): Id
            is_active (string): Active
            name (string): TODO: type description here.
            page (int): TODO: type description here.
            start_date (string): Start date
            state (string): State
            updated (string): Updated at

        Returns:
            ProjectSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/projects/"

        # Process optional query parameters
        query_parameters = {
            "category": category,
            "company": company,
            "cost": cost,
            "created": created,
            "due_date": due_date,
            "id": id,
            "is_active": is_active,
            "name": name,
            "page": page,
            "start_date": start_date,
            "state": state,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ProjectSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_projects_update(self,
                               category,
                               company,
                               cost,
                               created,
                               id,
                               is_active,
                               pk,
                               state,
                               updated,
                               due_date=None,
                               name=None,
                               start_date=None):
        """Does a PUT request to /api/v1.0/nomad/projects/{pk}/.

        Projects management

        Args:
            category (string): TODO: type description here.
            company (string): TODO: type description here.
            cost (string): TODO: type description here.
            created (string): Created at
            id (string): Id
            is_active (string): Active
            pk (string): TODO: type description here.
            state (string): State
            updated (string): Updated at
            due_date (DateTime, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            start_date (DateTime, optional): TODO: type description here.

        Returns:
            ProjectSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/projects/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_parameters = {
            "created": created,
            "id": id,
            "is_active": is_active,
            "state": state,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "category": category,
            "company": company,
            "cost": cost,
            "due_date": due_date,
            "name": name,
            "start_date": start_date
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ProjectSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_projects_update(self,
                               category,
                               company,
                               cost,
                               created,
                               id,
                               is_active,
                               pk,
                               state,
                               updated,
                               due_date=None,
                               name=None,
                               start_date=None):
        """Does a POST request to /api/v1.0/nomad/projects/{pk}/.

        Projects management

        Args:
            category (string): TODO: type description here.
            company (string): TODO: type description here.
            cost (string): TODO: type description here.
            created (string): Created at
            id (string): Id
            is_active (string): Active
            pk (string): TODO: type description here.
            state (string): State
            updated (string): Updated at
            due_date (DateTime, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            start_date (DateTime, optional): TODO: type description here.

        Returns:
            ProjectSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/projects/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_parameters = {
            "created": created,
            "id": id,
            "is_active": is_active,
            "state": state,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "category": category,
            "company": company,
            "cost": cost,
            "due_date": due_date,
            "name": name,
            "start_date": start_date
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ProjectSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_projects_partial_update(self,
                                       pk,
                                       category=None,
                                       company=None,
                                       cost=None,
                                       created=None,
                                       due_date=None,
                                       id=None,
                                       is_active=None,
                                       name=None,
                                       start_date=None,
                                       state=None,
                                       updated=None):
        """Does a PATCH request to /api/v1.0/nomad/projects/{pk}/.

        Projects management

        Args:
            pk (string): TODO: type description here.
            category (string, optional): TODO: type description here.
            company (string, optional): TODO: type description here.
            cost (string, optional): TODO: type description here.
            created (string, optional): Created at
            due_date (DateTime, optional): TODO: type description here.
            id (string, optional): Id
            is_active (string, optional): Active
            name (string, optional): TODO: type description here.
            start_date (DateTime, optional): TODO: type description here.
            state (string, optional): State
            updated (string, optional): Updated at

        Returns:
            ProjectSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/projects/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_parameters = {
            "created": created,
            "id": id,
            "is_active": is_active,
            "state": state,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "category": category,
            "company": company,
            "cost": cost,
            "due_date": due_date,
            "name": name,
            "start_date": start_date
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ProjectSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_projects_retrieve(self,
                              category,
                              company,
                              cost,
                              created,
                              due_date,
                              id,
                              is_active,
                              name,
                              pk,
                              start_date,
                              state,
                              updated):
        """Does a GET request to /api/v1.0/nomad/projects/{pk}/.

        Projects management

        Args:
            category (string): Category
            company (string): Company
            cost (string): Cost
            created (string): Created at
            due_date (string): Start date
            id (string): Id
            is_active (string): Active
            name (string): TODO: type description here.
            pk (string): TODO: type description here.
            start_date (string): Start date
            state (string): State
            updated (string): Updated at

        Returns:
            ProjectSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/projects/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_parameters = {
            "category": category,
            "company": company,
            "cost": cost,
            "created": created,
            "due_date": due_date,
            "id": id,
            "is_active": is_active,
            "name": name,
            "start_date": start_date,
            "state": state,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ProjectSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def delete_projects_destroy(self,
                                category,
                                company,
                                cost,
                                created,
                                due_date,
                                id,
                                is_active,
                                name,
                                pk,
                                start_date,
                                state,
                                updated):
        """Does a DELETE request to /api/v1.0/nomad/projects/{pk}/.

        Projects management

        Args:
            category (string): Category
            company (string): Company
            cost (string): Cost
            created (string): Created at
            due_date (string): Start date
            id (string): Id
            is_active (string): Active
            name (string): TODO: type description here.
            pk (string): TODO: type description here.
            start_date (string): Start date
            state (string): State
            updated (string): Updated at

        Returns:
            ProjectSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/projects/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_parameters = {
            "category": category,
            "company": company,
            "cost": cost,
            "created": created,
            "due_date": due_date,
            "id": id,
            "is_active": is_active,
            "name": name,
            "start_date": start_date,
            "state": state,
            "updated": updated
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ProjectSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_tasks_create(self,
                            cost,
                            project,
                            description=None,
                            due_date=None,
                            name=None,
                            start_date=None):
        """Does a POST request to /api/v1.0/nomad/tasks/.

        Project tasks management

        Args:
            cost (string): TODO: type description here.
            project (string): TODO: type description here.
            description (string, optional): TODO: type description here.
            due_date (DateTime, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            start_date (DateTime, optional): TODO: type description here.

        Returns:
            TaskSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/tasks/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "cost": cost,
            "project": project,
            "description": description,
            "due_date": due_date,
            "name": name,
            "start_date": start_date
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return TaskSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_tasks_list(self,
                       page):
        """Does a GET request to /api/v1.0/nomad/tasks/.

        Project tasks management

        Args:
            page (int): TODO: type description here.

        Returns:
            TaskSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/tasks/"

        # Process optional query parameters
        query_parameters = {
            "page": page
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return TaskSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_tasks_update(self,
                            cost,
                            pk,
                            project,
                            description=None,
                            due_date=None,
                            name=None,
                            start_date=None):
        """Does a PUT request to /api/v1.0/nomad/tasks/{pk}/.

        Project tasks management

        Args:
            cost (string): TODO: type description here.
            pk (string): TODO: type description here.
            project (string): TODO: type description here.
            description (string, optional): TODO: type description here.
            due_date (DateTime, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            start_date (DateTime, optional): TODO: type description here.

        Returns:
            TaskSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/tasks/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "cost": cost,
            "project": project,
            "description": description,
            "due_date": due_date,
            "name": name,
            "start_date": start_date
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return TaskSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_tasks_update(self,
                            cost,
                            pk,
                            project,
                            description=None,
                            due_date=None,
                            name=None,
                            start_date=None):
        """Does a POST request to /api/v1.0/nomad/tasks/{pk}/.

        Project tasks management

        Args:
            cost (string): TODO: type description here.
            pk (string): TODO: type description here.
            project (string): TODO: type description here.
            description (string, optional): TODO: type description here.
            due_date (DateTime, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            start_date (DateTime, optional): TODO: type description here.

        Returns:
            TaskSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/tasks/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "cost": cost,
            "project": project,
            "description": description,
            "due_date": due_date,
            "name": name,
            "start_date": start_date
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return TaskSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_tasks_partial_update(self,
                                    pk,
                                    cost=None,
                                    description=None,
                                    due_date=None,
                                    name=None,
                                    project=None,
                                    start_date=None):
        """Does a PATCH request to /api/v1.0/nomad/tasks/{pk}/.

        Project tasks management

        Args:
            pk (string): TODO: type description here.
            cost (string, optional): TODO: type description here.
            description (string, optional): TODO: type description here.
            due_date (DateTime, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            project (string, optional): TODO: type description here.
            start_date (DateTime, optional): TODO: type description here.

        Returns:
            TaskSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/tasks/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "cost": cost,
            "description": description,
            "due_date": due_date,
            "name": name,
            "project": project,
            "start_date": start_date
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return TaskSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_tasks_retrieve(self,
                           pk):
        """Does a GET request to /api/v1.0/nomad/tasks/{pk}/.

        Project tasks management

        Args:
            pk (string): TODO: type description here.

        Returns:
            TaskSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/tasks/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return TaskSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def delete_tasks_destroy(self,
                             pk):
        """Does a DELETE request to /api/v1.0/nomad/tasks/{pk}/.

        Project tasks management

        Args:
            pk (string): TODO: type description here.

        Returns:
            TaskSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/tasks/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return TaskSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_invitation_requests_list(self,
                                     page):
        """Does a GET request to /api/v1.0/nomad/requests/.

        Invitation requests management

        Args:
            page (int): TODO: type description here.

        Returns:
            InvitationRequestSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/requests/"

        # Process optional query parameters
        query_parameters = {
            "page": page
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationRequestSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_invitation_requests_update(self,
                                          pk,
                                          company=None,
                                          invitation=None):
        """Does a PUT request to /api/v1.0/nomad/requests/{pk}/.

        Invitation requests management

        Args:
            pk (string): TODO: type description here.
            company (string, optional): TODO: type description here.
            invitation (string, optional): TODO: type description here.

        Returns:
            InvitationRequestSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/requests/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "company": company,
            "invitation": invitation
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationRequestSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_invitation_requests_update(self,
                                          pk,
                                          company=None,
                                          invitation=None):
        """Does a POST request to /api/v1.0/nomad/requests/{pk}/.

        Invitation requests management

        Args:
            pk (string): TODO: type description here.
            company (string, optional): TODO: type description here.
            invitation (string, optional): TODO: type description here.

        Returns:
            InvitationRequestSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/requests/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "company": company,
            "invitation": invitation
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationRequestSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_invitation_requests_partial_update(self,
                                                  pk,
                                                  company=None,
                                                  invitation=None):
        """Does a PATCH request to /api/v1.0/nomad/requests/{pk}/.

        Invitation requests management

        Args:
            pk (string): TODO: type description here.
            company (string, optional): TODO: type description here.
            invitation (string, optional): TODO: type description here.

        Returns:
            InvitationRequestSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/requests/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "company": company,
            "invitation": invitation
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationRequestSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_invitation_requests_retrieve(self,
                                         pk):
        """Does a GET request to /api/v1.0/nomad/requests/{pk}/.

        Invitation requests management

        Args:
            pk (string): TODO: type description here.

        Returns:
            InvitationRequestSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/requests/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationRequestSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def delete_invitation_requests_destroy(self,
                                           pk):
        """Does a DELETE request to /api/v1.0/nomad/requests/{pk}/.

        Invitation requests management

        Args:
            pk (string): TODO: type description here.

        Returns:
            InvitationRequestSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/requests/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationRequestSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_invitation_requests_invite(self,
                                          pk,
                                          company=None,
                                          invitation=None):
        """Does a POST request to /api/v1.0/nomad/requests/{pk}/invite/.

        Creates invitation for

        Args:
            pk (string): TODO: type description here.
            company (string, optional): TODO: type description here.
            invitation (string, optional): TODO: type description here.

        Returns:
            InvitationRequestSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/requests/{pk}/invite/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "company": company,
            "invitation": invitation
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationRequestSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_invitations_create(self,
                                  email,
                                  user,
                                  company=None,
                                  date_accepted=None,
                                  first_name=None,
                                  invited_user=None,
                                  is_admin=None,
                                  language=None,
                                  last_name=None,
                                  role=None):
        """Does a POST request to /api/v1.0/nomad/invitations/.

        Invitations management

        Args:
            email (string): TODO: type description here.
            user (string): TODO: type description here.
            company (string, optional): TODO: type description here.
            date_accepted (DateTime, optional): TODO: type description here.
            first_name (string, optional): TODO: type description here.
            invited_user (string, optional): TODO: type description here.
            is_admin (bool, optional): invited user will receive staff
                permissions inside  account
            language (string, optional): The language of invitation  letter
                that will be sent
            last_name (string, optional): TODO: type description here.
            role (RoleEnum, optional): TODO: type description here.

        Returns:
            InvitationSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/invitations/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "email": email,
            "user": user,
            "company": company,
            "date_accepted": date_accepted,
            "first_name": first_name,
            "invited_user": invited_user,
            "is_admin": is_admin,
            "language": language,
            "last_name": last_name,
            "role":  role.to_string() if role is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_invitations_list(self,
                             page):
        """Does a GET request to /api/v1.0/nomad/invitations/.

        Invitations management

        Args:
            page (int): TODO: type description here.

        Returns:
            InvitationSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/invitations/"

        # Process optional query parameters
        query_parameters = {
            "page": page
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_invitations_update(self,
                                  email,
                                  pk,
                                  user,
                                  company=None,
                                  date_accepted=None,
                                  first_name=None,
                                  invited_user=None,
                                  is_admin=None,
                                  language=None,
                                  last_name=None,
                                  role=None):
        """Does a PUT request to /api/v1.0/nomad/invitations/{pk}/.

        Invitations management

        Args:
            email (string): TODO: type description here.
            pk (string): TODO: type description here.
            user (string): TODO: type description here.
            company (string, optional): TODO: type description here.
            date_accepted (DateTime, optional): TODO: type description here.
            first_name (string, optional): TODO: type description here.
            invited_user (string, optional): TODO: type description here.
            is_admin (bool, optional): invited user will receive staff
                permissions inside  account
            language (string, optional): The language of invitation  letter
                that will be sent
            last_name (string, optional): TODO: type description here.
            role (RoleEnum, optional): TODO: type description here.

        Returns:
            InvitationSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/invitations/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "email": email,
            "user": user,
            "company": company,
            "date_accepted": date_accepted,
            "first_name": first_name,
            "invited_user": invited_user,
            "is_admin": is_admin,
            "language": language,
            "last_name": last_name,
            "role":  role.to_string() if role is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_invitations_update(self,
                                  email,
                                  pk,
                                  user,
                                  company=None,
                                  date_accepted=None,
                                  first_name=None,
                                  invited_user=None,
                                  is_admin=None,
                                  language=None,
                                  last_name=None,
                                  role=None):
        """Does a POST request to /api/v1.0/nomad/invitations/{pk}/.

        Invitations management

        Args:
            email (string): TODO: type description here.
            pk (string): TODO: type description here.
            user (string): TODO: type description here.
            company (string, optional): TODO: type description here.
            date_accepted (DateTime, optional): TODO: type description here.
            first_name (string, optional): TODO: type description here.
            invited_user (string, optional): TODO: type description here.
            is_admin (bool, optional): invited user will receive staff
                permissions inside  account
            language (string, optional): The language of invitation  letter
                that will be sent
            last_name (string, optional): TODO: type description here.
            role (RoleEnum, optional): TODO: type description here.

        Returns:
            InvitationSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/invitations/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "email": email,
            "user": user,
            "company": company,
            "date_accepted": date_accepted,
            "first_name": first_name,
            "invited_user": invited_user,
            "is_admin": is_admin,
            "language": language,
            "last_name": last_name,
            "role":  role.to_string() if role is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_invitations_partial_update(self,
                                          pk,
                                          company=None,
                                          date_accepted=None,
                                          email=None,
                                          first_name=None,
                                          invited_user=None,
                                          is_admin=None,
                                          language=None,
                                          last_name=None,
                                          role=None,
                                          user=None):
        """Does a PATCH request to /api/v1.0/nomad/invitations/{pk}/.

        Invitations management

        Args:
            pk (string): TODO: type description here.
            company (string, optional): TODO: type description here.
            date_accepted (DateTime, optional): TODO: type description here.
            email (string, optional): TODO: type description here.
            first_name (string, optional): TODO: type description here.
            invited_user (string, optional): TODO: type description here.
            is_admin (bool, optional): invited user will receive staff
                permissions inside  account
            language (string, optional): The language of invitation  letter
                that will be sent
            last_name (string, optional): TODO: type description here.
            role (RoleEnum, optional): TODO: type description here.
            user (string, optional): TODO: type description here.

        Returns:
            InvitationSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/invitations/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "company": company,
            "date_accepted": date_accepted,
            "email": email,
            "first_name": first_name,
            "invited_user": invited_user,
            "is_admin": is_admin,
            "language": language,
            "last_name": last_name,
            "role":  role.to_string() if role is not None else None,
            "user": user
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_invitations_retrieve(self,
                                 pk):
        """Does a GET request to /api/v1.0/nomad/invitations/{pk}/.

        Invitations management

        Args:
            pk (string): TODO: type description here.

        Returns:
            InvitationSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/invitations/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def delete_invitations_destroy(self,
                                   pk):
        """Does a DELETE request to /api/v1.0/nomad/invitations/{pk}/.

        Invitations management

        Args:
            pk (string): TODO: type description here.

        Returns:
            InvitationSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/invitations/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return InvitationSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_users_list(self,
                       page):
        """Does a GET request to /api/v1.0/nomad/users/.

        Users management

        Args:
            page (int): TODO: type description here.

        Returns:
            UserSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/nomad/users/"

        # Process optional query parameters
        query_parameters = {
            "page": page
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return UserSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_who_am_iapi_get(self):
        """Does a GET request to /api/v1.0/user/whoami/.

        Returns information about current user

        Returns:
            WhoAmISerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/whoami/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return WhoAmISerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_spoken_language_create(self,
                                      language,
                                      proficiency=None):
        """Does a POST request to /api/v1.0/user/profile/languages/.

        List of all spoken languages for current user with score of speaking

        Args:
            language (string): TODO: type description here.
            proficiency (ProficiencyEnum, optional): TODO: type description
                here.

        Returns:
            SpokenLanguageSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/languages/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "language": language,
            "proficiency":  proficiency.to_string() if proficiency is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SpokenLanguageSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_spoken_language_list(self,
                                 page):
        """Does a GET request to /api/v1.0/user/profile/languages/.

        List of all spoken languages for current user with score of speaking

        Args:
            page (int): TODO: type description here.

        Returns:
            SpokenLanguageSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/languages/"

        # Process optional query parameters
        query_parameters = {
            "page": page
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SpokenLanguageSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_spoken_language_update(self,
                                      language,
                                      pk,
                                      proficiency=None):
        """Does a PUT request to /api/v1.0/user/profile/languages/{pk}/.

        List of all spoken languages for current user with score of speaking

        Args:
            language (string): TODO: type description here.
            pk (string): TODO: type description here.
            proficiency (ProficiencyEnum, optional): TODO: type description
                here.

        Returns:
            SpokenLanguageSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/languages/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "language": language,
            "proficiency":  proficiency.to_string() if proficiency is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SpokenLanguageSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_spoken_language_retrieve(self,
                                     pk):
        """Does a GET request to /api/v1.0/user/profile/languages/{pk}/.

        List of all spoken languages for current user with score of speaking

        Args:
            pk (string): TODO: type description here.

        Returns:
            SpokenLanguageSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/languages/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SpokenLanguageSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def delete_spoken_language_destroy(self,
                                       pk):
        """Does a DELETE request to /api/v1.0/user/profile/languages/{pk}/.

        List of all spoken languages for current user with score of speaking

        Args:
            pk (string): TODO: type description here.

        Returns:
            SpokenLanguageSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/languages/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SpokenLanguageSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_expertise_create(self,
                                skill,
                                proficiency=None):
        """Does a POST request to /api/v1.0/user/profile/expertise/.

        List of all schools of current user skills with score of exprertises

        Args:
            skill (string): TODO: type description here.
            proficiency (ProficiencyEnum, optional): TODO: type description
                here.

        Returns:
            ExpertiseSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/expertise/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "skill": skill,
            "proficiency":  proficiency.to_string() if proficiency is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ExpertiseSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_expertise_list(self,
                           page):
        """Does a GET request to /api/v1.0/user/profile/expertise/.

        List of all schools of current user skills with score of exprertises

        Args:
            page (int): TODO: type description here.

        Returns:
            ExpertiseSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/expertise/"

        # Process optional query parameters
        query_parameters = {
            "page": page
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ExpertiseSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_expertise_update(self,
                                pk,
                                skill,
                                proficiency=None):
        """Does a PUT request to /api/v1.0/user/profile/expertise/{pk}/.

        List of all schools of current user skills with score of exprertises

        Args:
            pk (string): TODO: type description here.
            skill (string): TODO: type description here.
            proficiency (ProficiencyEnum, optional): TODO: type description
                here.

        Returns:
            ExpertiseSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/expertise/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "skill": skill,
            "proficiency":  proficiency.to_string() if proficiency is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ExpertiseSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_expertise_update(self,
                                pk,
                                skill,
                                proficiency=None):
        """Does a POST request to /api/v1.0/user/profile/expertise/{pk}/.

        List of all schools of current user skills with score of exprertises

        Args:
            pk (string): TODO: type description here.
            skill (string): TODO: type description here.
            proficiency (ProficiencyEnum, optional): TODO: type description
                here.

        Returns:
            ExpertiseSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/expertise/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "skill": skill,
            "proficiency":  proficiency.to_string() if proficiency is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ExpertiseSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_expertise_partial_update(self,
                                        pk,
                                        proficiency=None,
                                        skill=None):
        """Does a PATCH request to /api/v1.0/user/profile/expertise/{pk}/.

        List of all schools of current user skills with score of exprertises

        Args:
            pk (string): TODO: type description here.
            proficiency (ProficiencyEnum, optional): TODO: type description
                here.
            skill (string, optional): TODO: type description here.

        Returns:
            ExpertiseSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/expertise/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "proficiency":  proficiency.to_string() if proficiency is not None else None,
            "skill": skill
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ExpertiseSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_expertise_retrieve(self,
                               pk):
        """Does a GET request to /api/v1.0/user/profile/expertise/{pk}/.

        List of all schools of current user skills with score of exprertises

        Args:
            pk (string): TODO: type description here.

        Returns:
            ExpertiseSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/expertise/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ExpertiseSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def delete_expertise_destroy(self,
                                 pk):
        """Does a DELETE request to /api/v1.0/user/profile/expertise/{pk}/.

        List of all schools of current user skills with score of exprertises

        Args:
            pk (string): TODO: type description here.

        Returns:
            ExpertiseSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/expertise/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return ExpertiseSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_skill_create(self,
                            category=None,
                            name=None):
        """Does a POST request to /api/v1.0/user/profile/skill/.

        List of all known skills in Nomad Labs

        Args:
            category (string, optional): TODO: type description here.
            name (string, optional): TODO: type description here.

        Returns:
            SkillSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/skill/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "category": category,
            "name": name
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SkillSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_skill_list(self,
                       page):
        """Does a GET request to /api/v1.0/user/profile/skill/.

        List of all known skills in Nomad Labs

        Args:
            page (int): TODO: type description here.

        Returns:
            SkillSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/skill/"

        # Process optional query parameters
        query_parameters = {
            "page": page
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SkillSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_skill_update(self,
                            pk,
                            category=None,
                            name=None):
        """Does a PUT request to /api/v1.0/user/profile/skill/{pk}/.

        List of all known skills in Nomad Labs

        Args:
            pk (string): TODO: type description here.
            category (string, optional): TODO: type description here.
            name (string, optional): TODO: type description here.

        Returns:
            SkillSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/skill/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "category": category,
            "name": name
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SkillSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_skill_update(self,
                            pk,
                            category=None,
                            name=None):
        """Does a POST request to /api/v1.0/user/profile/skill/{pk}/.

        List of all known skills in Nomad Labs

        Args:
            pk (string): TODO: type description here.
            category (string, optional): TODO: type description here.
            name (string, optional): TODO: type description here.

        Returns:
            SkillSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/skill/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "category": category,
            "name": name
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SkillSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_skill_partial_update(self,
                                    pk,
                                    category=None,
                                    name=None):
        """Does a PATCH request to /api/v1.0/user/profile/skill/{pk}/.

        List of all known skills in Nomad Labs

        Args:
            pk (string): TODO: type description here.
            category (string, optional): TODO: type description here.
            name (string, optional): TODO: type description here.

        Returns:
            SkillSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/skill/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "category": category,
            "name": name
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SkillSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_skill_retrieve(self,
                           pk):
        """Does a GET request to /api/v1.0/user/profile/skill/{pk}/.

        List of all known skills in Nomad Labs

        Args:
            pk (string): TODO: type description here.

        Returns:
            SkillSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/skill/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SkillSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def delete_skill_destroy(self,
                             pk):
        """Does a DELETE request to /api/v1.0/user/profile/skill/{pk}/.

        List of all known skills in Nomad Labs

        Args:
            pk (string): TODO: type description here.

        Returns:
            SkillSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/skill/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SkillSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_settings_nickname_api_get(self):
        """Does a GET request to /api/v1.0/user/settings/nickname/.

        TODO: type endpoint description here.

        Returns:
            SettingsNicknameSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/nickname/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SettingsNicknameSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_settings_nickname_api_put(self,
                                         current_password,
                                         nickname):
        """Does a PUT request to /api/v1.0/user/settings/nickname/.

        TODO: type endpoint description here.

        Args:
            current_password (string): TODO: type description here.
            nickname (string): TODO: type description here.

        Returns:
            SettingsNicknameSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/nickname/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "current_password": current_password,
            "nickname": nickname
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SettingsNicknameSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_settings_nickname_api_patch(self,
                                           current_password=None,
                                           nickname=None):
        """Does a PATCH request to /api/v1.0/user/settings/nickname/.

        TODO: type endpoint description here.

        Args:
            current_password (string, optional): TODO: type description here.
            nickname (string, optional): TODO: type description here.

        Returns:
            SettingsNicknameSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/nickname/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "current_password": current_password,
            "nickname": nickname
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SettingsNicknameSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_settings_password_api_put(self,
                                         current_password,
                                         new_password):
        """Does a PUT request to /api/v1.0/user/settings/password/.

        TODO: type endpoint description here.

        Args:
            current_password (string): TODO: type description here.
            new_password (string): TODO: type description here.

        Returns:
            SettingsPasswordSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/password/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "current_password": current_password,
            "new_password": new_password
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SettingsPasswordSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_settings_password_api_patch(self,
                                           current_password=None,
                                           new_password=None):
        """Does a PATCH request to /api/v1.0/user/settings/password/.

        TODO: type endpoint description here.

        Args:
            current_password (string, optional): TODO: type description here.
            new_password (string, optional): TODO: type description here.

        Returns:
            SettingsPasswordSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/password/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "current_password": current_password,
            "new_password": new_password
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SettingsPasswordSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_settings_language_api_get(self):
        """Does a GET request to /api/v1.0/user/settings/language/.

        TODO: type endpoint description here.

        Returns:
            SettingsLanguageSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/language/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SettingsLanguageSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_settings_language_api_put(self,
                                         language=None):
        """Does a PUT request to /api/v1.0/user/settings/language/.

        TODO: type endpoint description here.

        Args:
            language (string, optional): TODO: type description here.

        Returns:
            SettingsLanguageSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/language/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "language": language
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SettingsLanguageSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_settings_language_api_patch(self,
                                           language=None):
        """Does a PATCH request to /api/v1.0/user/settings/language/.

        TODO: type endpoint description here.

        Args:
            language (string, optional): TODO: type description here.

        Returns:
            SettingsLanguageSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/language/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "language": language
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SettingsLanguageSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_settings_timezone_api_get(self):
        """Does a GET request to /api/v1.0/user/settings/timezone/.

        TODO: type endpoint description here.

        Returns:
            SettingsTimezoneSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/timezone/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SettingsTimezoneSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_settings_timezone_api_put(self,
                                         timezone):
        """Does a PUT request to /api/v1.0/user/settings/timezone/.

        TODO: type endpoint description here.

        Args:
            timezone (string):  (Acceptable values are: "Africa/Abidjan",
                "Africa/Accra", "Africa/Addis_Ababa", "Africa/Algiers",
                "Africa/Asmara", "Africa/Bamako", "Africa/Bangui",
                "Africa/Banjul", "Africa/Bissau", "Africa/Blantyre",
                "Africa/Brazzaville", "Africa/Bujumbura", "Africa/Cairo",
                "Africa/Casablanca", "Africa/Ceuta", "Africa/Conakry",
                "Africa/Dakar", "Africa/Dar_es_Salaam", "Africa/Djibouti",
                "Africa/Douala", "Africa/El_Aaiun", "Africa/Freetown",
                "Africa/Gaborone", "Africa/Harare", "Africa/Johannesburg",
                "Africa/Juba", "Africa/Kampala", "Africa/Khartoum",
                "Africa/Kigali", "Africa/Kinshasa", "Africa/Lagos",
                "Africa/Libreville", "Africa/Lome", "Africa/Luanda",
                "Africa/Lubumbashi", "Africa/Lusaka", "Africa/Malabo",
                "Africa/Maputo", "Africa/Maseru", "Africa/Mbabane",
                "Africa/Mogadishu", "Africa/Monrovia", "Africa/Nairobi",
                "Africa/Ndjamena", "Africa/Niamey", "Africa/Nouakchott",
                "Africa/Ouagadougou", "Africa/Porto-Novo", "Africa/Sao_Tome",
                "Africa/Tripoli", "Africa/Tunis", "Africa/Windhoek",
                "America/Adak", "America/Anchorage", "America/Anguilla",
                "America/Antigua", "America/Araguaina",
                "America/Argentina/Buenos_Aires",
                "America/Argentina/Catamarca", "America/Argentina/Cordoba",
                "America/Argentina/Jujuy", "America/Argentina/La_Rioja",
                "America/Argentina/Mendoza", "America/Argentina/Rio_Gallegos",
                "America/Argentina/Salta", "America/Argentina/San_Juan",
                "America/Argentina/San_Luis", "America/Argentina/Tucuman",
                "America/Argentina/Ushuaia", "America/Aruba",
                "America/Asuncion", "America/Atikokan", "America/Bahia",
                "America/Bahia_Banderas", "America/Barbados", "America/Belem",
                "America/Belize", "America/Blanc-Sablon", "America/Boa_Vista",
                "America/Bogota", "America/Boise", "America/Cambridge_Bay",
                "America/Campo_Grande", "America/Cancun", "America/Caracas",
                "America/Cayenne", "America/Cayman", "America/Chicago",
                "America/Chihuahua", "America/Costa_Rica", "America/Creston",
                "America/Cuiaba", "America/Curacao", "America/Danmarkshavn",
                "America/Dawson", "America/Dawson_Creek", "America/Denver",
                "America/Detroit", "America/Dominica", "America/Edmonton",
                "America/Eirunepe", "America/El_Salvador",
                "America/Fort_Nelson", "America/Fortaleza",
                "America/Glace_Bay", "America/Godthab", "America/Goose_Bay",
                "America/Grand_Turk", "America/Grenada", "America/Guadeloupe",
                "America/Guatemala", "America/Guayaquil", "America/Guyana",
                "America/Halifax", "America/Havana", "America/Hermosillo",
                "America/Indiana/Indianapolis", "America/Indiana/Knox",
                "America/Indiana/Marengo", "America/Indiana/Petersburg",
                "America/Indiana/Tell_City", "America/Indiana/Vevay",
                "America/Indiana/Vincennes", "America/Indiana/Winamac",
                "America/Inuvik", "America/Iqaluit", "America/Jamaica",
                "America/Juneau", "America/Kentucky/Louisville",
                "America/Kentucky/Monticello", "America/Kralendijk",
                "America/La_Paz", "America/Lima", "America/Los_Angeles",
                "America/Lower_Princes", "America/Maceio", "America/Managua",
                "America/Manaus", "America/Marigot", "America/Martinique",
                "America/Matamoros", "America/Mazatlan", "America/Menominee",
                "America/Merida", "America/Metlakatla", "America/Mexico_City",
                "America/Miquelon", "America/Moncton", "America/Monterrey",
                "America/Montevideo", "America/Montserrat", "America/Nassau",
                "America/New_York", "America/Nipigon", "America/Nome",
                "America/Noronha", "America/North_Dakota/Beulah",
                "America/North_Dakota/Center",
                "America/North_Dakota/New_Salem", "America/Ojinaga",
                "America/Panama", "America/Pangnirtung", "America/Paramaribo",
                "America/Phoenix", "America/Port-au-Prince",
                "America/Port_of_Spain", "America/Porto_Velho",
                "America/Puerto_Rico", "America/Rainy_River",
                "America/Rankin_Inlet", "America/Recife", "America/Regina",
                "America/Resolute", "America/Rio_Branco",
                "America/Santa_Isabel", "America/Santarem",
                "America/Santiago", "America/Santo_Domingo",
                "America/Sao_Paulo", "America/Scoresbysund", "America/Sitka",
                "America/St_Barthelemy", "America/St_Johns",
                "America/St_Kitts", "America/St_Lucia", "America/St_Thomas",
                "America/St_Vincent", "America/Swift_Current",
                "America/Tegucigalpa", "America/Thule", "America/Thunder_Bay",
                "America/Tijuana", "America/Toronto", "America/Tortola",
                "America/Vancouver", "America/Whitehorse", "America/Winnipeg",
                "America/Yakutat", "America/Yellowknife", "Antarctica/Casey",
                "Antarctica/Davis", "Antarctica/DumontDUrville",
                "Antarctica/Macquarie", "Antarctica/Mawson",
                "Antarctica/McMurdo", "Antarctica/Palmer",
                "Antarctica/Rothera", "Antarctica/Syowa", "Antarctica/Troll",
                "Antarctica/Vostok", "Arctic/Longyearbyen", "Asia/Aden",
                "Asia/Almaty", "Asia/Amman", "Asia/Anadyr", "Asia/Aqtau",
                "Asia/Aqtobe", "Asia/Ashgabat", "Asia/Baghdad",
                "Asia/Bahrain", "Asia/Baku", "Asia/Bangkok", "Asia/Beirut",
                "Asia/Bishkek", "Asia/Brunei", "Asia/Chita",
                "Asia/Choibalsan", "Asia/Colombo", "Asia/Damascus",
                "Asia/Dhaka", "Asia/Dili", "Asia/Dubai", "Asia/Dushanbe",
                "Asia/Gaza", "Asia/Hebron", "Asia/Ho_Chi_Minh",
                "Asia/Hong_Kong", "Asia/Hovd", "Asia/Irkutsk", "Asia/Jakarta",
                "Asia/Jayapura", "Asia/Jerusalem", "Asia/Kabul",
                "Asia/Kamchatka", "Asia/Karachi", "Asia/Kathmandu",
                "Asia/Khandyga", "Asia/Kolkata", "Asia/Krasnoyarsk",
                "Asia/Kuala_Lumpur", "Asia/Kuching", "Asia/Kuwait",
                "Asia/Macau", "Asia/Magadan", "Asia/Makassar", "Asia/Manila",
                "Asia/Muscat", "Asia/Nicosia", "Asia/Novokuznetsk",
                "Asia/Novosibirsk", "Asia/Omsk", "Asia/Oral",
                "Asia/Phnom_Penh", "Asia/Pontianak", "Asia/Pyongyang",
                "Asia/Qatar", "Asia/Qyzylorda", "Asia/Rangoon", "Asia/Riyadh",
                "Asia/Sakhalin", "Asia/Samarkand", "Asia/Seoul",
                "Asia/Shanghai", "Asia/Singapore", "Asia/Srednekolymsk",
                "Asia/Taipei", "Asia/Tashkent", "Asia/Tbilisi", "Asia/Tehran",
                "Asia/Thimphu", "Asia/Tokyo", "Asia/Ulaanbaatar",
                "Asia/Urumqi", "Asia/Ust-Nera", "Asia/Vientiane",
                "Asia/Vladivostok", "Asia/Yakutsk", "Asia/Yekaterinburg",
                "Asia/Yerevan", "Atlantic/Azores", "Atlantic/Bermuda",
                "Atlantic/Canary", "Atlantic/Cape_Verde", "Atlantic/Faroe",
                "Atlantic/Madeira", "Atlantic/Reykjavik",
                "Atlantic/South_Georgia", "Atlantic/St_Helena",
                "Atlantic/Stanley", "Australia/Adelaide",
                "Australia/Brisbane", "Australia/Broken_Hill",
                "Australia/Currie", "Australia/Darwin", "Australia/Eucla",
                "Australia/Hobart", "Australia/Lindeman",
                "Australia/Lord_Howe", "Australia/Melbourne",
                "Australia/Perth", "Australia/Sydney", "Canada/Atlantic",
                "Canada/Central", "Canada/Eastern", "Canada/Mountain",
                "Canada/Newfoundland", "Canada/Pacific", "Europe/Amsterdam",
                "Europe/Andorra", "Europe/Athens", "Europe/Belgrade",
                "Europe/Berlin", "Europe/Bratislava", "Europe/Brussels",
                "Europe/Bucharest", "Europe/Budapest", "Europe/Busingen",
                "Europe/Chisinau", "Europe/Copenhagen", "Europe/Dublin",
                "Europe/Gibraltar", "Europe/Guernsey", "Europe/Helsinki",
                "Europe/Isle_of_Man", "Europe/Istanbul", "Europe/Jersey",
                "Europe/Kaliningrad", "Europe/Kiev", "Europe/Lisbon",
                "Europe/Ljubljana", "Europe/London", "Europe/Luxembourg",
                "Europe/Madrid", "Europe/Malta", "Europe/Mariehamn",
                "Europe/Minsk", "Europe/Monaco", "Europe/Moscow",
                "Europe/Oslo", "Europe/Paris", "Europe/Podgorica",
                "Europe/Prague", "Europe/Riga", "Europe/Rome",
                "Europe/Samara", "Europe/San_Marino", "Europe/Sarajevo",
                "Europe/Simferopol", "Europe/Skopje", "Europe/Sofia",
                "Europe/Stockholm", "Europe/Tallinn", "Europe/Tirane",
                "Europe/Uzhgorod", "Europe/Vaduz", "Europe/Vatican",
                "Europe/Vienna", "Europe/Vilnius", "Europe/Volgograd",
                "Europe/Warsaw", "Europe/Zagreb", "Europe/Zaporozhye",
                "Europe/Zurich", "GMT", "Indian/Antananarivo",
                "Indian/Chagos", "Indian/Christmas", "Indian/Cocos",
                "Indian/Comoro", "Indian/Kerguelen", "Indian/Mahe",
                "Indian/Maldives", "Indian/Mauritius", "Indian/Mayotte",
                "Indian/Reunion", "Pacific/Apia", "Pacific/Auckland",
                "Pacific/Bougainville", "Pacific/Chatham", "Pacific/Chuuk",
                "Pacific/Easter", "Pacific/Efate", "Pacific/Enderbury",
                "Pacific/Fakaofo", "Pacific/Fiji", "Pacific/Funafuti",
                "Pacific/Galapagos", "Pacific/Gambier", "Pacific/Guadalcanal",
                "Pacific/Guam", "Pacific/Honolulu", "Pacific/Johnston",
                "Pacific/Kiritimati", "Pacific/Kosrae", "Pacific/Kwajalein",
                "Pacific/Majuro", "Pacific/Marquesas", "Pacific/Midway",
                "Pacific/Nauru", "Pacific/Niue", "Pacific/Norfolk",
                "Pacific/Noumea", "Pacific/Pago_Pago", "Pacific/Palau",
                "Pacific/Pitcairn", "Pacific/Pohnpei", "Pacific/Port_Moresby",
                "Pacific/Rarotonga", "Pacific/Saipan", "Pacific/Tahiti",
                "Pacific/Tarawa", "Pacific/Tongatapu", "Pacific/Wake",
                "Pacific/Wallis", "US/Alaska", "US/Arizona", "US/Central",
                "US/Eastern", "US/Hawaii", "US/Mountain", "US/Pacific",
                "UTC")

        Returns:
            SettingsTimezoneSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/timezone/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "timezone": timezone
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SettingsTimezoneSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_settings_timezone_api_patch(self,
                                           timezone=None):
        """Does a PATCH request to /api/v1.0/user/settings/timezone/.

        TODO: type endpoint description here.

        Args:
            timezone (string, optional):  (Acceptable values are:
                "Africa/Abidjan", "Africa/Accra", "Africa/Addis_Ababa",
                "Africa/Algiers", "Africa/Asmara", "Africa/Bamako",
                "Africa/Bangui", "Africa/Banjul", "Africa/Bissau",
                "Africa/Blantyre", "Africa/Brazzaville", "Africa/Bujumbura",
                "Africa/Cairo", "Africa/Casablanca", "Africa/Ceuta",
                "Africa/Conakry", "Africa/Dakar", "Africa/Dar_es_Salaam",
                "Africa/Djibouti", "Africa/Douala", "Africa/El_Aaiun",
                "Africa/Freetown", "Africa/Gaborone", "Africa/Harare",
                "Africa/Johannesburg", "Africa/Juba", "Africa/Kampala",
                "Africa/Khartoum", "Africa/Kigali", "Africa/Kinshasa",
                "Africa/Lagos", "Africa/Libreville", "Africa/Lome",
                "Africa/Luanda", "Africa/Lubumbashi", "Africa/Lusaka",
                "Africa/Malabo", "Africa/Maputo", "Africa/Maseru",
                "Africa/Mbabane", "Africa/Mogadishu", "Africa/Monrovia",
                "Africa/Nairobi", "Africa/Ndjamena", "Africa/Niamey",
                "Africa/Nouakchott", "Africa/Ouagadougou",
                "Africa/Porto-Novo", "Africa/Sao_Tome", "Africa/Tripoli",
                "Africa/Tunis", "Africa/Windhoek", "America/Adak",
                "America/Anchorage", "America/Anguilla", "America/Antigua",
                "America/Araguaina", "America/Argentina/Buenos_Aires",
                "America/Argentina/Catamarca", "America/Argentina/Cordoba",
                "America/Argentina/Jujuy", "America/Argentina/La_Rioja",
                "America/Argentina/Mendoza", "America/Argentina/Rio_Gallegos",
                "America/Argentina/Salta", "America/Argentina/San_Juan",
                "America/Argentina/San_Luis", "America/Argentina/Tucuman",
                "America/Argentina/Ushuaia", "America/Aruba",
                "America/Asuncion", "America/Atikokan", "America/Bahia",
                "America/Bahia_Banderas", "America/Barbados", "America/Belem",
                "America/Belize", "America/Blanc-Sablon", "America/Boa_Vista",
                "America/Bogota", "America/Boise", "America/Cambridge_Bay",
                "America/Campo_Grande", "America/Cancun", "America/Caracas",
                "America/Cayenne", "America/Cayman", "America/Chicago",
                "America/Chihuahua", "America/Costa_Rica", "America/Creston",
                "America/Cuiaba", "America/Curacao", "America/Danmarkshavn",
                "America/Dawson", "America/Dawson_Creek", "America/Denver",
                "America/Detroit", "America/Dominica", "America/Edmonton",
                "America/Eirunepe", "America/El_Salvador",
                "America/Fort_Nelson", "America/Fortaleza",
                "America/Glace_Bay", "America/Godthab", "America/Goose_Bay",
                "America/Grand_Turk", "America/Grenada", "America/Guadeloupe",
                "America/Guatemala", "America/Guayaquil", "America/Guyana",
                "America/Halifax", "America/Havana", "America/Hermosillo",
                "America/Indiana/Indianapolis", "America/Indiana/Knox",
                "America/Indiana/Marengo", "America/Indiana/Petersburg",
                "America/Indiana/Tell_City", "America/Indiana/Vevay",
                "America/Indiana/Vincennes", "America/Indiana/Winamac",
                "America/Inuvik", "America/Iqaluit", "America/Jamaica",
                "America/Juneau", "America/Kentucky/Louisville",
                "America/Kentucky/Monticello", "America/Kralendijk",
                "America/La_Paz", "America/Lima", "America/Los_Angeles",
                "America/Lower_Princes", "America/Maceio", "America/Managua",
                "America/Manaus", "America/Marigot", "America/Martinique",
                "America/Matamoros", "America/Mazatlan", "America/Menominee",
                "America/Merida", "America/Metlakatla", "America/Mexico_City",
                "America/Miquelon", "America/Moncton", "America/Monterrey",
                "America/Montevideo", "America/Montserrat", "America/Nassau",
                "America/New_York", "America/Nipigon", "America/Nome",
                "America/Noronha", "America/North_Dakota/Beulah",
                "America/North_Dakota/Center",
                "America/North_Dakota/New_Salem", "America/Ojinaga",
                "America/Panama", "America/Pangnirtung", "America/Paramaribo",
                "America/Phoenix", "America/Port-au-Prince",
                "America/Port_of_Spain", "America/Porto_Velho",
                "America/Puerto_Rico", "America/Rainy_River",
                "America/Rankin_Inlet", "America/Recife", "America/Regina",
                "America/Resolute", "America/Rio_Branco",
                "America/Santa_Isabel", "America/Santarem",
                "America/Santiago", "America/Santo_Domingo",
                "America/Sao_Paulo", "America/Scoresbysund", "America/Sitka",
                "America/St_Barthelemy", "America/St_Johns",
                "America/St_Kitts", "America/St_Lucia", "America/St_Thomas",
                "America/St_Vincent", "America/Swift_Current",
                "America/Tegucigalpa", "America/Thule", "America/Thunder_Bay",
                "America/Tijuana", "America/Toronto", "America/Tortola",
                "America/Vancouver", "America/Whitehorse", "America/Winnipeg",
                "America/Yakutat", "America/Yellowknife", "Antarctica/Casey",
                "Antarctica/Davis", "Antarctica/DumontDUrville",
                "Antarctica/Macquarie", "Antarctica/Mawson",
                "Antarctica/McMurdo", "Antarctica/Palmer",
                "Antarctica/Rothera", "Antarctica/Syowa", "Antarctica/Troll",
                "Antarctica/Vostok", "Arctic/Longyearbyen", "Asia/Aden",
                "Asia/Almaty", "Asia/Amman", "Asia/Anadyr", "Asia/Aqtau",
                "Asia/Aqtobe", "Asia/Ashgabat", "Asia/Baghdad",
                "Asia/Bahrain", "Asia/Baku", "Asia/Bangkok", "Asia/Beirut",
                "Asia/Bishkek", "Asia/Brunei", "Asia/Chita",
                "Asia/Choibalsan", "Asia/Colombo", "Asia/Damascus",
                "Asia/Dhaka", "Asia/Dili", "Asia/Dubai", "Asia/Dushanbe",
                "Asia/Gaza", "Asia/Hebron", "Asia/Ho_Chi_Minh",
                "Asia/Hong_Kong", "Asia/Hovd", "Asia/Irkutsk", "Asia/Jakarta",
                "Asia/Jayapura", "Asia/Jerusalem", "Asia/Kabul",
                "Asia/Kamchatka", "Asia/Karachi", "Asia/Kathmandu",
                "Asia/Khandyga", "Asia/Kolkata", "Asia/Krasnoyarsk",
                "Asia/Kuala_Lumpur", "Asia/Kuching", "Asia/Kuwait",
                "Asia/Macau", "Asia/Magadan", "Asia/Makassar", "Asia/Manila",
                "Asia/Muscat", "Asia/Nicosia", "Asia/Novokuznetsk",
                "Asia/Novosibirsk", "Asia/Omsk", "Asia/Oral",
                "Asia/Phnom_Penh", "Asia/Pontianak", "Asia/Pyongyang",
                "Asia/Qatar", "Asia/Qyzylorda", "Asia/Rangoon", "Asia/Riyadh",
                "Asia/Sakhalin", "Asia/Samarkand", "Asia/Seoul",
                "Asia/Shanghai", "Asia/Singapore", "Asia/Srednekolymsk",
                "Asia/Taipei", "Asia/Tashkent", "Asia/Tbilisi", "Asia/Tehran",
                "Asia/Thimphu", "Asia/Tokyo", "Asia/Ulaanbaatar",
                "Asia/Urumqi", "Asia/Ust-Nera", "Asia/Vientiane",
                "Asia/Vladivostok", "Asia/Yakutsk", "Asia/Yekaterinburg",
                "Asia/Yerevan", "Atlantic/Azores", "Atlantic/Bermuda",
                "Atlantic/Canary", "Atlantic/Cape_Verde", "Atlantic/Faroe",
                "Atlantic/Madeira", "Atlantic/Reykjavik",
                "Atlantic/South_Georgia", "Atlantic/St_Helena",
                "Atlantic/Stanley", "Australia/Adelaide",
                "Australia/Brisbane", "Australia/Broken_Hill",
                "Australia/Currie", "Australia/Darwin", "Australia/Eucla",
                "Australia/Hobart", "Australia/Lindeman",
                "Australia/Lord_Howe", "Australia/Melbourne",
                "Australia/Perth", "Australia/Sydney", "Canada/Atlantic",
                "Canada/Central", "Canada/Eastern", "Canada/Mountain",
                "Canada/Newfoundland", "Canada/Pacific", "Europe/Amsterdam",
                "Europe/Andorra", "Europe/Athens", "Europe/Belgrade",
                "Europe/Berlin", "Europe/Bratislava", "Europe/Brussels",
                "Europe/Bucharest", "Europe/Budapest", "Europe/Busingen",
                "Europe/Chisinau", "Europe/Copenhagen", "Europe/Dublin",
                "Europe/Gibraltar", "Europe/Guernsey", "Europe/Helsinki",
                "Europe/Isle_of_Man", "Europe/Istanbul", "Europe/Jersey",
                "Europe/Kaliningrad", "Europe/Kiev", "Europe/Lisbon",
                "Europe/Ljubljana", "Europe/London", "Europe/Luxembourg",
                "Europe/Madrid", "Europe/Malta", "Europe/Mariehamn",
                "Europe/Minsk", "Europe/Monaco", "Europe/Moscow",
                "Europe/Oslo", "Europe/Paris", "Europe/Podgorica",
                "Europe/Prague", "Europe/Riga", "Europe/Rome",
                "Europe/Samara", "Europe/San_Marino", "Europe/Sarajevo",
                "Europe/Simferopol", "Europe/Skopje", "Europe/Sofia",
                "Europe/Stockholm", "Europe/Tallinn", "Europe/Tirane",
                "Europe/Uzhgorod", "Europe/Vaduz", "Europe/Vatican",
                "Europe/Vienna", "Europe/Vilnius", "Europe/Volgograd",
                "Europe/Warsaw", "Europe/Zagreb", "Europe/Zaporozhye",
                "Europe/Zurich", "GMT", "Indian/Antananarivo",
                "Indian/Chagos", "Indian/Christmas", "Indian/Cocos",
                "Indian/Comoro", "Indian/Kerguelen", "Indian/Mahe",
                "Indian/Maldives", "Indian/Mauritius", "Indian/Mayotte",
                "Indian/Reunion", "Pacific/Apia", "Pacific/Auckland",
                "Pacific/Bougainville", "Pacific/Chatham", "Pacific/Chuuk",
                "Pacific/Easter", "Pacific/Efate", "Pacific/Enderbury",
                "Pacific/Fakaofo", "Pacific/Fiji", "Pacific/Funafuti",
                "Pacific/Galapagos", "Pacific/Gambier", "Pacific/Guadalcanal",
                "Pacific/Guam", "Pacific/Honolulu", "Pacific/Johnston",
                "Pacific/Kiritimati", "Pacific/Kosrae", "Pacific/Kwajalein",
                "Pacific/Majuro", "Pacific/Marquesas", "Pacific/Midway",
                "Pacific/Nauru", "Pacific/Niue", "Pacific/Norfolk",
                "Pacific/Noumea", "Pacific/Pago_Pago", "Pacific/Palau",
                "Pacific/Pitcairn", "Pacific/Pohnpei", "Pacific/Port_Moresby",
                "Pacific/Rarotonga", "Pacific/Saipan", "Pacific/Tahiti",
                "Pacific/Tarawa", "Pacific/Tongatapu", "Pacific/Wake",
                "Pacific/Wallis", "US/Alaska", "US/Arizona", "US/Central",
                "US/Eastern", "US/Hawaii", "US/Mountain", "US/Pacific",
                "UTC")

        Returns:
            SettingsTimezoneSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/timezone/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "timezone":  timezone if timezone is not None else "Africa/Abidjan"
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SettingsTimezoneSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_emails_list_api_get(self):
        """Does a GET request to /api/v1.0/user/settings/email/.

        List of all additional emails for current user and create one

        Returns:
            UserEmailSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/email/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return UserEmailSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_emails_list_api_post(self,
                                    current_password,
                                    email,
                                    is_verified=None):
        """Does a POST request to /api/v1.0/user/settings/email/.

        List of all additional emails for current user and create one

        Args:
            current_password (string): TODO: type description here.
            email (string): TODO: type description here.
            is_verified (bool, optional): TODO: type description here.

        Returns:
            UserEmailSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/email/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "current_password": current_password,
            "email": email,
            "is_verified": is_verified
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return UserEmailSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_emails_detail_api_get(self,
                                  pk):
        """Does a GET request to /api/v1.0/user/settings/email/{pk}/.

        Detail about given additional email for GET; delete it for DELETE

        Args:
            pk (string): TODO: type description here.

        Returns:
            UserEmailSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/email/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return UserEmailSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_emails_make_primary_api_post(self,
                                            current_password,
                                            email,
                                            pk,
                                            is_verified=None):
        """Does a POST request to /api/v1.0/user/settings/email/{pk}/primary/.

        Mark this email as primary for current user

        Args:
            current_password (string): TODO: type description here.
            email (string): TODO: type description here.
            pk (string): TODO: type description here.
            is_verified (bool, optional): TODO: type description here.

        Returns:
            UserEmailSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/email/{pk}/primary/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "current_password": current_password,
            "email": email,
            "is_verified": is_verified
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return UserEmailSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_emails_resend_api_post(self,
                                      current_password,
                                      email,
                                      pk,
                                      is_verified=None):
        """Does a POST request to /api/v1.0/user/settings/email/{pk}/resend/.

        TODO: type endpoint description here.

        Args:
            current_password (string): TODO: type description here.
            email (string): TODO: type description here.
            pk (string): TODO: type description here.
            is_verified (bool, optional): TODO: type description here.

        Returns:
            UserEmailSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/email/{pk}/resend/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "current_password": current_password,
            "email": email,
            "is_verified": is_verified
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return UserEmailSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_request_invitation_api_post(self):
        """Does a POST request to /api/v1.0/invitation/supplier/.

        API endpoint for request invitation on complex role

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/invitation/supplier/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body

    def create_request_invitation_api_post(self):
        """Does a POST request to /api/v1.0/invitation/retailer/.

        API endpoint for request invitation on complex role

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/invitation/retailer/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body
