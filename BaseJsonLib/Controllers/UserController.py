# -*- coding: utf-8 -*-

"""
   BaseJsonLib.Controllers.UserController

   This file was automatically generated by APIMATIC BETA v2.0 on 02/24/2016
"""
import unirest

from BaseJsonLib.APIHelper import APIHelper
from BaseJsonLib.Configuration import Configuration
from BaseJsonLib.APIException import APIException
from BaseJsonLib.Models.EditPhotoAPIView import EditPhotoAPIView
from BaseJsonLib.Models.EditPhotoAPIView import EditPhotoAPIView
from BaseJsonLib.Models.EditPhotoAPIView import EditPhotoAPIView
from BaseJsonLib.Models.EditProfileSerializer import EditProfileSerializer
from BaseJsonLib.Models.EditProfileSerializer import EditProfileSerializer
from BaseJsonLib.Models.EditProfileSerializer import EditProfileSerializer
from BaseJsonLib.Models.SpokenLanguageSerializer import SpokenLanguageSerializer
from BaseJsonLib.Models.SpokenLanguageSerializer import SpokenLanguageSerializer
from BaseJsonLib.Models.EducationSerializer import EducationSerializer
from BaseJsonLib.Models.EducationSerializer import EducationSerializer
from BaseJsonLib.Models.EducationSerializer import EducationSerializer
from BaseJsonLib.Models.EducationSerializer import EducationSerializer
from BaseJsonLib.Models.EducationSerializer import EducationSerializer
from BaseJsonLib.Models.EducationSerializer import EducationSerializer
from BaseJsonLib.Models.SettingsPasswordSerializer import SettingsPasswordSerializer
from BaseJsonLib.Models.DeactivateSerializer import DeactivateSerializer
from BaseJsonLib.Models.DeactivateSerializer import DeactivateSerializer
from BaseJsonLib.Models.UserEmailSerializer import UserEmailSerializer


class UserController(object):


    """A Controller to access Endpoints in the BaseJsonLib API."""

    def get_edit_photo_api_get(self):
        """Does a GET request to /api/v1.0/user/profile/photo/.

        Upload user photo

        Returns:
            EditPhotoAPIView: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/photo/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return EditPhotoAPIView(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_edit_photo_api_put(self,
                                  photo=None):
        """Does a PUT request to /api/v1.0/user/profile/photo/.

        Upload user photo

        Args:
            photo (string, optional): TODO: type description here.

        Returns:
            EditPhotoAPIView: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/photo/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "photo": photo
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return EditPhotoAPIView(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_edit_photo_api_patch(self,
                                    photo=None):
        """Does a PATCH request to /api/v1.0/user/profile/photo/.

        Upload user photo

        Args:
            photo (string, optional): TODO: type description here.

        Returns:
            EditPhotoAPIView: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/photo/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "photo": photo
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return EditPhotoAPIView(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_edit_profile_api_get(self):
        """Does a GET request to /api/v1.0/user/profile/.

        Update user profile information

        Returns:
            EditProfileSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return EditProfileSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_edit_profile_api_put(self,
                                    country,
                                    first_name,
                                    last_name,
                                    city=None,
                                    headline=None,
                                    something_about_me=None):
        """Does a PUT request to /api/v1.0/user/profile/.

        Update user profile information

        Args:
            country (string): TODO: type description here.
            first_name (string): TODO: type description here.
            last_name (string): TODO: type description here.
            city (string, optional): TODO: type description here.
            headline (string, optional): TODO: type description here.
            something_about_me (string, optional): TODO: type description
                here.

        Returns:
            EditProfileSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "country": country,
            "first_name": first_name,
            "last_name": last_name,
            "city": city,
            "headline": headline,
            "something_about_me": something_about_me
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return EditProfileSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_edit_profile_api_patch(self,
                                      city=None,
                                      country=None,
                                      first_name=None,
                                      headline=None,
                                      last_name=None,
                                      something_about_me=None):
        """Does a PATCH request to /api/v1.0/user/profile/.

        Update user profile information

        Args:
            city (string, optional): TODO: type description here.
            country (string, optional): TODO: type description here.
            first_name (string, optional): TODO: type description here.
            headline (string, optional): TODO: type description here.
            last_name (string, optional): TODO: type description here.
            something_about_me (string, optional): TODO: type description
                here.

        Returns:
            EditProfileSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "city": city,
            "country": country,
            "first_name": first_name,
            "headline": headline,
            "last_name": last_name,
            "something_about_me": something_about_me
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return EditProfileSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_spoken_language_update(self,
                                      language,
                                      pk,
                                      proficiency=None):
        """Does a POST request to /api/v1.0/user/profile/languages/{pk}/.

        List of all spoken languages for current user with score of speaking

        Args:
            language (string): TODO: type description here.
            pk (string): TODO: type description here.
            proficiency (ProficiencyEnum, optional): TODO: type description
                here.

        Returns:
            SpokenLanguageSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/languages/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "language": language,
            "proficiency":  proficiency.to_string() if proficiency is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SpokenLanguageSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_spoken_language_partial_update(self,
                                              pk,
                                              language=None,
                                              proficiency=None):
        """Does a PATCH request to /api/v1.0/user/profile/languages/{pk}/.

        List of all spoken languages for current user with score of speaking

        Args:
            pk (string): TODO: type description here.
            language (string, optional): TODO: type description here.
            proficiency (ProficiencyEnum, optional): TODO: type description
                here.

        Returns:
            SpokenLanguageSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/languages/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "language": language,
            "proficiency":  proficiency.to_string() if proficiency is not None else None
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SpokenLanguageSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_education_create(self,
                                city,
                                degree,
                                school_name,
                                field_of_study=None,
                                from_date=None,
                                notes=None,
                                to_date=None):
        """Does a POST request to /api/v1.0/user/profile/education/.

        List of all schools of current user

        Args:
            city (string): TODO: type description here.
            degree (string): e.g. Bachelor, Magister, PhD, etc
            school_name (string): TODO: type description here.
            field_of_study (string, optional): TODO: type description here.
            from_date (DateTime, optional): TODO: type description here.
            notes (string, optional): TODO: type description here.
            to_date (DateTime, optional): TODO: type description here.

        Returns:
            EducationSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/education/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "city": city,
            "degree": degree,
            "school_name": school_name,
            "field_of_study": field_of_study,
            "from_date": from_date,
            "notes": notes,
            "to_date": to_date
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return EducationSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_education_list(self,
                           page):
        """Does a GET request to /api/v1.0/user/profile/education/.

        List of all schools of current user

        Args:
            page (int): TODO: type description here.

        Returns:
            EducationSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/education/"

        # Process optional query parameters
        query_parameters = {
            "page": page
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return EducationSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_education_update(self,
                                city,
                                degree,
                                pk,
                                school_name,
                                field_of_study=None,
                                from_date=None,
                                notes=None,
                                to_date=None):
        """Does a PUT request to /api/v1.0/user/profile/education/{pk}/.

        List of all schools of current user

        Args:
            city (string): TODO: type description here.
            degree (string): e.g. Bachelor, Magister, PhD, etc
            pk (string): TODO: type description here.
            school_name (string): TODO: type description here.
            field_of_study (string, optional): TODO: type description here.
            from_date (DateTime, optional): TODO: type description here.
            notes (string, optional): TODO: type description here.
            to_date (DateTime, optional): TODO: type description here.

        Returns:
            EducationSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/education/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "city": city,
            "degree": degree,
            "school_name": school_name,
            "field_of_study": field_of_study,
            "from_date": from_date,
            "notes": notes,
            "to_date": to_date
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return EducationSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def create_education_update(self,
                                city,
                                degree,
                                pk,
                                school_name,
                                field_of_study=None,
                                from_date=None,
                                notes=None,
                                to_date=None):
        """Does a POST request to /api/v1.0/user/profile/education/{pk}/.

        List of all schools of current user

        Args:
            city (string): TODO: type description here.
            degree (string): e.g. Bachelor, Magister, PhD, etc
            pk (string): TODO: type description here.
            school_name (string): TODO: type description here.
            field_of_study (string, optional): TODO: type description here.
            from_date (DateTime, optional): TODO: type description here.
            notes (string, optional): TODO: type description here.
            to_date (DateTime, optional): TODO: type description here.

        Returns:
            EducationSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/education/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "city": city,
            "degree": degree,
            "school_name": school_name,
            "field_of_study": field_of_study,
            "from_date": from_date,
            "notes": notes,
            "to_date": to_date
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return EducationSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_education_retrieve(self,
                               pk):
        """Does a GET request to /api/v1.0/user/profile/education/{pk}/.

        List of all schools of current user

        Args:
            pk (string): TODO: type description here.

        Returns:
            EducationSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/education/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return EducationSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def delete_education_destroy(self,
                                 pk):
        """Does a DELETE request to /api/v1.0/user/profile/education/{pk}/.

        List of all schools of current user

        Args:
            pk (string): TODO: type description here.

        Returns:
            EducationSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/profile/education/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return EducationSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def get_settings_password_api_get(self):
        """Does a GET request to /api/v1.0/user/settings/password/.

        TODO: type endpoint description here.

        Returns:
            SettingsPasswordSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/password/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return SettingsPasswordSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_deactivate_user_api_put(self,
                                       current_password,
                                       note):
        """Does a PUT request to /api/v1.0/user/settings/deactivate/.

        Deactivate user by himself

        Args:
            current_password (string): TODO: type description here.
            note (string): TODO: type description here.

        Returns:
            DeactivateSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/deactivate/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "current_password": current_password,
            "note": note
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return DeactivateSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_deactivate_user_api_patch(self,
                                         current_password=None,
                                         note=None):
        """Does a PATCH request to /api/v1.0/user/settings/deactivate/.

        Deactivate user by himself

        Args:
            current_password (string, optional): TODO: type description here.
            note (string, optional): TODO: type description here.

        Returns:
            DeactivateSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/deactivate/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "current_password": current_password,
            "note": note
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return DeactivateSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def delete_emails_detail_api_delete(self,
                                        pk):
        """Does a DELETE request to /api/v1.0/user/settings/email/{pk}/.

        Detail about given additional email for GET; delete it for DELETE

        Args:
            pk (string): TODO: type description here.

        Returns:
            UserEmailSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/user/settings/email/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return UserEmailSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)
