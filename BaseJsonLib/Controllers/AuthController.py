# -*- coding: utf-8 -*-

"""
   BaseJsonLib.Controllers.AuthController

   This file was automatically generated by APIMATIC BETA v2.0 on 02/24/2016
"""
import unirest

from BaseJsonLib.APIHelper import APIHelper
from BaseJsonLib.Configuration import Configuration
from BaseJsonLib.APIException import APIException
from BaseJsonLib.Models.CreatePasswordSerializer import CreatePasswordSerializer
from BaseJsonLib.Models.CreatePasswordSerializer import CreatePasswordSerializer


class AuthController(object):


    """A Controller to access Endpoints in the BaseJsonLib API."""

    def create_password_api_put(self,
                                password,
                                token):
        """Does a PUT request to /api/v1.0/auth/password/create/{token}/.

        Create new password instead of forgotten one for registered user

        Args:
            password (string): TODO: type description here.
            token (string): TODO: type description here.

        Returns:
            CreatePasswordSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/auth/password/create/{token}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "token": token
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "password": password
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CreatePasswordSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)

    def update_create_password_api_patch(self,
                                         token,
                                         password=None):
        """Does a PATCH request to /api/v1.0/auth/password/create/{token}/.

        Create new password instead of forgotten one for registered user

        Args:
            token (string): TODO: type description here.
            password (string, optional): TODO: type description here.

        Returns:
            CreatePasswordSerializer: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/v1.0/auth/password/create/{token}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "token": token
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare parameters
        parameters = {
            "password": password
        }
        # The body will be multipart data, so set the header
        headers['Content-Type'] = 'multipart/form-data'

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CreatePasswordSerializer(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)
