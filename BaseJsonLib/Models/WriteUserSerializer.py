# -*- coding: utf-8 -*-

"""
   BaseJsonLib.Models.WriteUserSerializer
 
   This file was automatically generated by APIMATIC BETA v2.0 on 02/24/2016
"""
from BaseJsonLib.APIHelper import APIHelper
from BaseJsonLib.Models.CompanyTinySerializer import CompanyTinySerializer
from BaseJsonLib.Models.RoleEnum import RoleEnum

class WriteUserSerializer(object):

    """Implementation of the 'WriteUserSerializer' model.

    TODO: type model description here.

    Attributes:
        companies (list of CompanyTinySerializer): TODO: type description
            here.
        timezone (string): TODO: type description here.
        country (string): TODO: type description here.
        is_superuser (bool): Designates that this user has all permissions
            without explicitly assigning them.
        email (string): TODO: type description here.
        role (RoleEnum): TODO: type description here.
        first_name (string): TODO: type description here.
        last_name (string): TODO: type description here.
        nickname (string): TODO: type description here.
        is_staff (bool): TODO: type description here.
        is_active (bool): TODO: type description here.
        date_joined (DateTime): TODO: type description here.
        photo (string): TODO: type description here.
        city (string): TODO: type description here.
        headline (string): TODO: type description here.
        something_about_me (string): TODO: type description here.
        language (string): TODO: type description here.

    """

    def __init__(self,
                 **kwargs):
        """Constructor for the WriteUserSerializer class
        
        Args:
            **kwargs: Keyword Arguments in order to initialise the
                object. Any of the attributes in this object are able to
                be set through the **kwargs of the constructor. The values
                that can be supplied and their types are as follows::

                    companies -- list of CompanyTinySerializer -- Sets the attribute companies
                    timezone -- string -- Sets the attribute timezone
                    country -- string -- Sets the attribute country
                    is_superuser -- bool -- Sets the attribute is_superuser
                    email -- string -- Sets the attribute email
                    role -- RoleEnum -- Sets the attribute role
                    first_name -- string -- Sets the attribute first_name
                    last_name -- string -- Sets the attribute last_name
                    nickname -- string -- Sets the attribute nickname
                    is_staff -- bool -- Sets the attribute is_staff
                    is_active -- bool -- Sets the attribute is_active
                    date_joined -- DateTime -- Sets the attribute date_joined
                    photo -- string -- Sets the attribute photo
                    city -- string -- Sets the attribute city
                    headline -- string -- Sets the attribute headline
                    something_about_me -- string -- Sets the attribute something_about_me
                    language -- string -- Sets the attribute language
        
        """
        # Set all of the parameters to their default values
        self.companies = None
        self.timezone = None
        self.country = None
        self.is_superuser = None
        self.email = None
        self.role = None
        self.first_name = None
        self.last_name = None
        self.nickname = None
        self.is_staff = None
        self.is_active = None
        self.date_joined = None
        self.photo = None
        self.city = None
        self.headline = None
        self.something_about_me = None
        self.language = None

        # Create a mapping from API property names to Model property names
        replace_names = {
            "companies": "companies",
            "timezone": "timezone",
            "country": "country",
            "is_superuser": "is_superuser",
            "email": "email",
            "role": "role",
            "first_name": "first_name",
            "last_name": "last_name",
            "nickname": "nickname",
            "is_staff": "is_staff",
            "is_active": "is_active",
            "date_joined": "date_joined",
            "photo": "photo",
            "city": "city",
            "headline": "headline",
            "something_about_me": "something_about_me",
            "language": "language",
        }

        # Parse all of the Key-Value arguments
        if kwargs is not None:
            for key in kwargs:
                # Only add arguments that are actually part of this object
                if key in replace_names:
                    setattr(self, replace_names[key], kwargs[key])

            # Other objects also need to be initialised properly
            if "companies" in kwargs:
                # Parameter is an array, so we need to iterate through it
                self.companies = list()
                for item in kwargs["companies"]:
                    self.companies.append(CompanyTinySerializer(**item))

            # Other objects also need to be initialised properly
            if "role" in kwargs:
                self.role = RoleEnum.from_string(kwargs["role"])

    def resolve_names(self):
        """Creates a dictionary representation of this object.
        
        This method converts an object to a dictionary that represents the
        format that the model should be in when passed into an API Request.
        Because of this, the generated dictionary may have different
        property names to that of the model itself.
        
        Returns:
            dict: The dictionary representing the object.
        
        """
        # Create a mapping from Model property names to API property names
        replace_names = {
            "companies": "companies",
            "timezone": "timezone",
            "country": "country",
            "is_superuser": "is_superuser",
            "email": "email",
            "role": "role",
            "first_name": "first_name",
            "last_name": "last_name",
            "nickname": "nickname",
            "is_staff": "is_staff",
            "is_active": "is_active",
            "date_joined": "date_joined",
            "photo": "photo",
            "city": "city",
            "headline": "headline",
            "something_about_me": "something_about_me",
            "language": "language",
        }

        retval = dict()

        return APIHelper.resolve_names(self, replace_names, retval)